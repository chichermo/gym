[
  {
    "id": "PHrXp6NDRlk",
    "title": "How not to go broke organizing a Ruby conference - Friendly + Jason Swett, Jess Brown, Jeremy Smith",
    "description": "In this special crossover episode, hosts from The Friendly Show, Indie Rails, and Code with Jason come together to share the unvarnished truth about organizing Ruby conferences.\n\nAdrian (Friendly RB), Jeremy (Blue Ridge Ruby), and Jason (Sin City Ruby) open up about their journeys from conference attendees to organizers, revealing the financial realities, emotional highs and lows, and unexpected challenges of creating memorable experiences for the Ruby community.\n\nWhat You'll Learn:\n\nHow much it really costs to start a conference (spoiler: more than you think)\nWhy hotel blocks can financially destroy small conference organizers\nThe 250+ hours of work that goes into organizing a single event\nHow COVID changed the conference landscape and created opportunities\nWhy some conferences intentionally don't record videos\nThe difference between building sustainable events vs. one-time experiences\nReal stories of both financial losses and life-changing community connections\nKey Topics Covered:\n\nConference economics and budgeting strategies\nVenue selection and negotiation pitfalls\nMarketing and ticket sales challenges\nThe psychology of conference organizing addiction\nAlternative event formats (like Jeremy's \"Ruby on Trails\" backpacking trip)\nSponsorship vs. ticket revenue strategies\nWhen to stop and why trilogy endings matter\nWhether you're considering organizing your first conference, curious about the business side of community events, or just want to understand what goes into creating those magical conference experiences, this conversation pulls back the curtain on the real work behind Ruby's regional conference scene.\n\nBuild Rails apps 10x faster with AVO\nLearn RoR 10x faster than Yaro did with SupeRails"
  },
  {
    "id": "eTgE5ClYK9s",
    "title": "#238 Deploy Rails 8 to Render.com. Solid Trifecta on Postgres",
    "description": "These days Render is my go-to tool for deploying Rails apps. \nFor example, SupeRails.com has been hosted there for 2 years now.\nRender is as easy as Heroku to maintain, but cheaper to scale!\n\nTry Render: https://fnf.dev/3Yn5cSq\n\nTimestamps:\n0:00 SupeRails on Render\n1:58 Switch Sqlite to Postgres\n03:50 Solid on single database \n08:36 Solid Queue and Mission Control\n13:36 Scaffold Posts \n14:13 Deploy to Render \n19:57 Render console\n20:50 Render.yml Blueprints\n22:15 One-click deploy\n\nP.S. A big thank you to Render.com for sponsoring this article! It gave me the opportunity to dive deeper into deploying Solid with PostgreSQL and explore Render."
  },
  {
    "id": "x-I-RjY73l8",
    "title": "#236 Run Moneygun SaaS locally. Configure Stripe Plans and Webhooks",
    "description": "Build your next B2B SaaS app (software as a service) with Moneygun: https://github.com/yshmarov/moneygun\n\nIt's the EASIEST way to add Teams and Subscriptions. Focus on Your unique app features, not stupid boilerplate."
  },
  {
    "id": "yJpG6i9kicY",
    "title": "Ruby on Rails #235 Easiest way to hide all user-facing IDs",
    "description": "You definitely want to hide **IDs** from your app. \n\nIt's a very basic security consideration.\n\nThere are many Ruby gems that let you hide ids, but neither gem is plug & play:\n\nSome gems require adding a slug attribute to each model. \n\nSome gems require updating your finder methods.\n\nI don't want to \"decorate\" my **internal** resource slugs.\n\nI don't want to care about UUIDs or ULIDs.\n\nI just want to say \"hide my IDs\" and it just works.\n\nThe best plug & play solution that I found is in Bullettrain source code: http://github.com/bullet-train-co/bullet_train-core\n\nHere's how you can hide ids in your Rails app\n\nPull Request adding ID obfuscation: https://github.com/yshmarov/moneygun/pull/209"
  },
  {
    "id": "kMRWbGhclsg",
    "title": "Vibe coding basics. Zero coding, only prompt engineering?!",
    "description": "These days I wouldn't hire someone that does not use any AI in their daily coding. Stubborn? Stuck in the past?\n\nHere's a very basic introduction to \"vibe coding\" with Rails and Cursor.\n\n- As a product designer, write what you want to build in the chat. The better your prompt is, the fewer iterations you will need.\n- \"Vibe\": Accept all changes & hope for the best. If you don't like the result, iterate in the chat. You are now a prompt engineer, not a dev.\n\nTry Moneygun, an open source minimalistic Rails 8 SaaS Multitenancy boilerplate. It's the fastest way to launch a B2B SaaS with Ruby on Rails: https://github.com/yshmarov/moneygun"
  },
  {
    "id": "KjlEm1kRYFY",
    "title": "New B2B SaaS boilerplate just dropped!",
    "description": "Previously Moneygun was just an example app of how to implement secure route-based Multitenancy without any gems.\n\nNow I've added Subscriptions on Organization level. Meaning, it's now a legit template for building B2B SaaS apps.\n\nB2B app - app where a team of users with different roles have access to shared resources.\n\nFeel free to use this as a template for your next app, or just as inspiration!\n\nPR adding subscriptions: https://github.com/yshmarov/moneygun/pull/197"
  },
  {
    "id": "rCA3JTwppc8",
    "title": "oEmbed - the secret public API for content metadata #227",
    "description": "Want to allow users to embed third-party content? (youtube or vimeo videos, podcast players)\nYou should use oEmbed.\nThis way you won't have to manually handle (sanitize, secure, ensure rendering) the embed code or parse content!\nUsers should provide an URL to content, not an HTML block!\n\nMy oembed app: https://oembed.superails.com/\nOembed app source code: https://github.com/yshmarov/oembed-parser-app\nText version: https://blog.corsego.com/oembed"
  },
  {
    "id": "jVIbg96h8P8",
    "title": "Best VS Code Extensions for Ruby on Rails Developers for 2025 #226",
    "description": "Copy my VS Code settings here: https://blog.corsego.com/vscode-cursor-extensions-rails\n\nThe extensions I use in every app:\n\"esbenp.prettier-vscode\", - lint CSS and JS\n\"bradlc.vscode-tailwindcss\", - Tailwind CSS lookup\n\"heybourn.headwind\", - order Tailwind styles\n\"eamodio.gitlens\", - Git change lookup\n\"Shopify.ruby-lsp\", - Ruby parser\n\"elia.erb-formatter\", - erb identation\n\"marcoroth.stimulus-lsp\", stimulus autocomplete and \n\"rubocop.vscode-rubocop\", - ruby linter\n\nIn settings.json I define the rules for each of the extensions."
  },
  {
    "id": "vS-F1PlLyTk",
    "title": "Typesense search with Ruby on Rails #225",
    "description": "Previously I did the obvious thing and searched my Postgres database for Posts by \"title\".\n\nBut when you need to scale your search due to a a large dataset, or want to use advanced search features (image/voice/ignore typos, etc), you might want to spin up a separate search server.\n\nThe usual suspects are Typesense, Elasticsearch, Meilisearch & Algolia.\n\nIn this episode we will create an index of our Posts on our own Typesense server.\nNext, we will perform search and render results by sending requests to our Typesense API endpoint\n\nTEXT walkthrough: https://blog.corsego.com/typesense-rails\nTypesense source code: https://fnf.dev/3ZIAjId\nGem Typesense-ruby: https://fnf.dev/3PHqHcb\nGem Typesense-rails: https://fnf.dev/4jBiZhw\nIntegrating Typesense into SupeRails (members only): https://fnf.dev/40t6NX4\n\n0:00 Different search engine APIs\n02:02 About Typesense\n3:30 Install Typesense\n4:25 Typesense API - collections, documents, index all posts\n8:25 Update Typesense index on Post Create/Update/Destroy\n9:29 Typesense API to search collection\n10:25 Rails Controller, views\n12:00 Typesense-rails integration\n13:00 Deploy to Production?\n\nThanks so much to Typesense for sponsoring this video! \nI had a lot of fun integrating the search server with Rails."
  },
  {
    "id": "iWESw39Lxe8",
    "title": "Global app settings with gem rails-settings-cached #224",
    "description": "Allow admin users to change global app settings like app name, contact email.\n\nWith this gem you store settings in the database, and have a UI to change settings.\n\nThis way, developers do not have to change code and re-deploy the app when configurations change.\n\nIt's amazing that you can use Setting **before** Rails is initialized. Meaning, you can maybe even let admins edit API keys!\n\n- [Gem rails-settings-cached](https://github.com/huacnlee/rails-settings-cached]\n- [My branch](https://github.com/huacnlee/rails-settings-cached/pull/259)\n- [PR implemeting the gem in an app](https://github.com/yshmarov/shopify-zero/pull/3)\n\n0:00 different approaches to app settings \n1:57 install gem rails-settings-cached\n4:30 Admin UI"
  },
  {
    "id": "944lk4JAdyg",
    "title": "ALL the Jekyll plugins you will ever need #223",
    "description": "10 Jekyll plugins (ruby gems) that will turn your blog from 💩 to 🔥\n\nEpisode source code: https://github.com/corsego/220-jekyll-blog/commits/main/\nBased on this blogpost: https://blog.corsego.com/jekyll-plugins\n\n0:00 Progress so far\n1:05 Navbar links\n3:40 Embed google form to subscribe\n5:20 Configure Minima theme\n9:14 Open external links in new tab\n10:48 Opengraph images\n16:34 Sitemap\n17:43 Jekyll Redirect From\n19:33 Link to edit page on Github\n22:32 Tag discovery pages\n27:00 Similar posts (based on tags)\n28:56 Anchor tags\n31:05 Fix CI (libvips)\n31:51 Fix Anchor tags duplication"
  },
  {
    "id": "G3aGZOp2Dug",
    "title": "Jekyll Theme and CI extensions. Add comments, analytics, monetisation #222",
    "description": "Let's add some external tools to our Jekyll site:\n- Plausible analytics for tracking visits\n- Giscus (Disqus alternative) for comments via Github Discussions\n- Buy Me A Coffee for basic monetisation\n\nMost importantly:\nWe will deploy Jekyll via our own CI.\nWe will learn to override layout defaults.\n\nEpisode source code: https://github.com/corsego/220-jekyll-blog\n\n0:00 Add comments with Giscus \n9:30 Add Plausible Analytics, Github Actions, override theme defaults\n15:38 Add BuyMeACoffee"
  },
  {
    "id": "AoGPCj7hg4M",
    "title": "You don't have a blog? Are you even a Web Developer? Create a blog with Jekyll! | #221",
    "description": "Use Jekyll: https://jekyllrb.com \nEpisode source code: https://github.com/corsego/220-jekyll-blog\nMy blog that uses Jekyll: https://github.com/yshmarov/yshmarov.github.io  \n\n0:00 Install & customise Jekyll \n05:58 Deploy to Production \n07:15 Create a new blogpost"
  },
  {
    "id": "BjqvcnUC4mo",
    "title": "Merry Christmas! Friendly Show 2024 Finale",
    "description": "Audio: https://www.friendly.show/2278525/episodes/16315043-adrian-yaro-christmas-classics-ai-coding-superrails-avo-updates-unwrapping-2024\n\nBuild Rails apps FAST with AVO: https://avohq.io\nLearn Rails FAST with SupeRails: https://superails.com"
  },
  {
    "id": "HNHORkndJ6E",
    "title": "Host a static website on Github Pages on your own domain for free | #220",
    "description": "Am I even a Web Developer, if I don't have a website?\n\nEpisode source code: https://github.com/corsego/220-jekyll-blog\nText version: https://blog.corsego.com/jekyll-blog-github-pages\nVerify a domain with Github: https://github.com/settings/pages_verified_domains/new\n\n0:00 about Github Pages\n2:37 create new repo, deploy on Github Pages\n04:05 verify a domain with Github\n05:40 serve website on your own domain"
  },
  {
    "id": "1lcS5K2iCQ8",
    "title": "How to use SupeRails",
    "description": "Source code for all episodes: https://github.com/corsego\nPlatform: https://superails.com\nText blog: https://blog.corsego.com"
  },
  {
    "id": "lEnvxm_JSg4",
    "title": "Add Avo to exiting app | SupeRails #218",
    "description": "Let's add Avo admin backend to an existing Rails app. We will also add search, admin-only access, and style the CRUD resources.\n\n0:00 generate Avo resources\n4:48 add search\n12:42 admin-only Avo access\n17:10 styling\n\nSource code:\n\ngenerate Avo resources: https://github.com/yshmarov/moneygun/commit/8e206ee40eb9778820b6f3455178919f5c81ba82\nadd search: https://github.com/yshmarov/moneygun/commit/21decdfbe257f55a615341f9efd420346839a042\nadmin-only Avo access: https://github.com/yshmarov/moneygun/commit/8fae41451c9380f6002f6435dd018b424f564d7a\nstyling: https://github.com/yshmarov/moneygun/commit/279403e174dff60a63bcdcf965da64626bbd40a8\nAll the changes: https://github.com/yshmarov/moneygun/compare/main...add-avo-3"
  },
  {
    "id": "pN-l1MaTPLQ",
    "title": "Ruby on Rails #217 Build an invite-only (Internal) app with Avo",
    "description": "If you want to build an Internal tool, or Admin dashboard in Ruby on Rails, there is no better tool than [Avo](http://avohq.io).\n\nIf you are building an internal tool, you don't need User registrations. You will want new users to join only via Invitation.\n\n0:00 Create new Rails 8 app\n1:31 Install Avo\n2:45 Rails 8 authentication generator\n3:55 Only logged in users can access Avo\n7:42 Generate Avo CRUD resources (User, Session)\n12:22 User Invitations\n15:55 Only Admin Users can access Avo\n20:43 Handle signed in non-admin users\n25:00 Add tests\n27:57 Summary\n\n✅ Install Avo\n✅ Rails 8 authentication\n✅ Only logged in users can access Avo\n✅ Generate Avo CRUD resources (User, Session)\n✅ User Invitations\n✅ Only Admin Users can access Avo\n✅ Test coverage\n\nUsually I try to make my videos shorter, but I really wanted to go through each problem you might have with Avo or Rails 8 authentication.\n\n[Episode source code](https://github.com/yshmarov/avo-internal-app/commits/main/)\n\n- https://blog.corsego.com/rails-8-authentication\n\nAvo resources:\n- [Rails 8 Authentication](https://docs.avohq.io/3.0/guides/rails-authentication-scaffold.html)"
  },
  {
    "id": "0q_8d3Wx6jo",
    "title": "Ruby on Rails #212 Stimulus Keyboard events. Bad, Good, Best approach",
    "description": "We will explore 3 different ways of solving the same problem with StimulusJS.\n\nI think solving the same problem with different approaches is a great way to learn.\n\n0:00 (BAD) Targets and Event listeners\n3:40 (BETTER) data-action in view, keyboard logic in stimulus\n5:05 (BEST) Stimulus keyboard events\n\nStimulus keyboard event docs: https://stimulus.hotwired.dev/reference/actions#keyboardevent-filter\nBlogpost: https://blog.corsego.com/stimulus-cmd-enter-to-submit\nSource code: https://github.com/corsego/212-stimulus-keyboard-submit/commit/98126bb58effc79439d235d02cc8f9f2028dda48"
  },
  {
    "id": "88WpvSQohkA",
    "title": "Friendly Show November 2024. Black Friday deals, SupeRails PRO, Hotwire Native, Office Hours",
    "description": "After a busy conference season Yaro & Adrian take the time to talk about ongoing projects.\n\nAVO Black Friday deal: https://avohq.io/deals\nSupeRails Black Friday deal: https://superails.com/deals\n\n0:00 Conferences\n1:49 Avo Guest Blogposts\n4:07 Rails 8\n8:38 Avo Registration Flow\n13:16 Avo Office Hours\n15:25 SupeRails Office Hours?\n16:47 SupeRails PRO\n19:10 Hotwire Native\n24:15 Moneygun\n28:50 Avo Directory App, Avo Demo websites\n32:00 Black Friday\n34:00 Yaro is available 🦄"
  },
  {
    "id": "kLPw34FQomI",
    "title": "Hotwire Native - Rails World 2024 Lightning talk (Unofficial recording), Yaroslav Shmarov",
    "description": "You will learn:\nWhat is Hotwire Native? \nHow is Hotwire Native different from Turbo Native and Strada? \nHow to prepare your Rails app to work as a Hotwire Native application? (Core topic of the talk)  \n\nSorry for the quality! Why? \nLightning talks are something new at Rails World. \nThis year they were not officially recorded. \nI recorded this on my own device and added the slides. \nI hope you appreciate the work and enjoy the presentation!"
  },
  {
    "id": "yWU8LloEVWo",
    "title": "Clickable Video Chapters. Vimeo Player API | SupeRails #211",
    "description": "In my app I embed videos with Vimeo.\n\nI’ve just implemented Video timestamp/chapter navigation on videos embeded on SupeRails.\n\nI was inspired by Chapters on Youtube.\n\n0:00 How Chapters work on Youtube\n1:19 Dynamic Vimeo video embeds\n3:58 Vimeo Player js - custom play button\n7:10 button to go to timestamp\n8:44 parse text to clickable chapters\n\nEpisode source code: https://github.com/corsego/211-vimeo-player-js-text-2-chapters/commit/86dfc94c15486040985641aaa1ac807c27054b63\nBlogpost: https://blog.corsego.com/vimeo-player-js-timeline-navigation\nVimeo Player JS: https://github.com/vimeo/player.js"
  },
  {
    "id": "oMFSa7lAh8g",
    "title": "Pros embed Vimeo. Amateurs embed Youtube. Learn Vimeo API basics | SupeRails #210",
    "description": "I host SupeRails PRO videos on Vimeo\nIt is great because:\n- no youtube branding & ads = more premium feeling\n- I don’t have to think about hosting my videos & styling my player\n- has basic security features, as “video can be viewed only on selected domains”\n- fixed cost, not usage based like MUX.com\n\nBut having hundreds of videos in my library I want an easy way to import videos from Vimeo into my Ruby on Rails app.\n\nI did not feel comfortable using an Vimeo API gems, but their own API is very good. You don’t need an api gem to use an API!\n\nEpisode source code: https://github.com/corsego/207-vimeo-api/commit/03a798a9ceeeccf511db0106ef973c6547b9201a\nBased on this blogpost: https://blog.corsego.com/vimeo-api"
  },
  {
    "id": "YzvWRzNwdiM",
    "title": "Moneygun - Add ActsAsTenant to an existing application | SupeRails #209",
    "description": "Enhance Multi-Tenancy with ActsAsTenant in Rails!\n\nIn this episode, we’re diving into ActsAsTenant—a gem that strengthens your multi-tenancy setup by ensuring that each tenant can only access their own data.\n\nWhile ActsAsTenant doesn't provide the database architecture for multi-tenancy, it adds an essential layer of security and data isolation to your Rails app.\n\nIn the previous episode, I introduced Moneygun, a multi-tenancy boilerplate for Rails.\n\nNow we’ll take it a step further by integrating ActsAsTenant into our existing setup, enhancing security and data management.\n\n0:00 Multitenancy basics\n1:50 Install ActsAsTenant\n5:30 Enforce Require tenant\n\nPull Request adding ActsAsTenant https://github.com/yshmarov/moneygun/pull/120\n\nGem ActsAsTenant: https://github.com/ErwinM/acts_as_tenant"
  },
  {
    "id": "hzfl6h5SlH8",
    "title": "Moneygun - Multitenancy & Teams boilerplate | SupeRails #208",
    "description": "In Episode 115 we created a multi-tenant application without any gems.\n\nMultitenancy was row-based, and we set current tenant via routes.\n\nEpisode 115: https://superails.com/posts/rails-7-115-multitenancy-teams-and-roles-without-a-gem\n\nBased on this I created a well-tested boilerplate multi-tenant application.\n\nThe name is \"Moneygun\".\n\nWhy? Because adding this architecture early in your app development will help you save & make a lot of money!\n\nSave money - on future refactoring.\nMake money - on making your apps business-friendly early.\n\n0:00 Teams should be an MVP feature!\n2:50 Invite users to organizations\n5:20 Role-based access\n6:52 Switch between organizations\n8:00 Different sidebars\n8:30 Inspect Gemfile\n9:29 Super Scaffolding\n\nMoneygun source code: https://github.com/yshmarov/moneygun"
  },
  {
    "id": "wOxILixW5H8",
    "title": "Exploring the SupeRails source code | SupeRails #207",
    "description": "In this episode we dive into the SupeRails codebase!\n\nSee the database architecture, gems, API dependencies, and admin backend powering the SupeRails web app.\n\nSubscribe to SupeRails to **ACCESS** the source code!\n\nJoin SupeRails: https://superails.com/pricing\nSupeRails source code: https://github.com/yshmarov/superails\n\n0:00 Feature overview\n0:00 Explore the Gemfile\n10:45 Admin dashboard\n12:40 Run app locally, import YouTube videos\n15:50 Stripe Subscription flow\n19:25 Explore database schema"
  },
  {
    "id": "9JhId5cJESc",
    "title": "Using Sentiment Analysis to analyse Udemy reviews. No AI, just math | SupeRails #206",
    "description": "Sentiment analysis is a way to analyse a text and quantify its positivity negativity based on keywords from a \"word positivity database\".\n\nIn this episode we will extract all my Udemy reviews and perform a sentiment analysis on all of them. How many are actually positive?\n\nMaybe these days \"AI magic\" could provide a better score, but THIS here is a mathematical approach.\n\nEpisode source code: https://github.com/corsego/206-sentiment-analysis/commit/f1e8e33a34d8daf7739d31801ddb096685e0b98d\n\nGem \"sentimental\": https://github.com/7compass/sentimental\n\nDid you enjoy the episode? Leave a testimonial here: https://superails.com/testimonials/"
  },
  {
    "id": "1pSxSiKKxis",
    "title": "Authentication-Zero: What Rails 8 Authentication Wants to Be When It Grows Up | SupeRails #205",
    "description": "Some people don't like Devise because:\n- it feels too much like magic\n- it can be hard to extend\n\nRails 8 authentication aims to solve these objections by generating all the authentication code INSIDE your app. No more outsourcing of authentication logic!\n\nBUT Rails 8 authentication is still very raw. It lacks registrations, session management, test generators & more. I don't think it's production-ready (yet).\n\nAuthentication-Zero already has everything Rails 8 authentication generator could ever want to include!\n\nIn this episode we will run the Authentication-Zero generators and see how a few of its plugins work.\n\nEven if you are not planning to use the gem now, it is a wonderful learning source for building different authentication-related features.\n\nAuthentication-Zero source code: https://github.com/lazaronixon/authentication-zero\nBased on this blogpost: https://blog.corsego.com/authentication-zero\nFollow Lazario Nixon: https://x.com/lazaronixon"
  },
  {
    "id": "7a5E8ZFbesA",
    "title": "PWA in real life. The Rails World 2024 experience with Campfire and Agenda app | SupeRails #204",
    "description": "During Rails World 2024 the 1000 attendees had the experience of using 2 PWA apps.\nThe Agenda app by Telos Labs, and a Campfire instance.\nIn this video I will show you how the two apps work.\n\nI am very grateful to Telos Labs for making the agenda app open source, so that everyone can learn and (reuse?) it as a boilerplate their events.\n\nTelos Labs Agenda App source code: http://github.com/TelosLabs/rails-world\nBuy Campfire: https://once.com/campfire"
  },
  {
    "id": "uUhiu6yBIZQ",
    "title": "Turbo Native 7. Strada Form Component (Native submit button)",
    "description": "Strada Form pattern lets us hide the submit button we display in web views, and replace it with a Native submit button in the top-right corner of the screen.  I think this should be the default pattern used for most Turbo Native forms.  [Episode source code](https://github.com/corsego/tinder/commit/83bf8f2c4def9539627150e461bc47d01bbb452c)  [iOS source](https://github.com/hotwired/turbo-ios/blob/main/Demo/Strada/FormComponent.swift)  [html/rails source](https://github.com/hotwired/turbo-native-demo/blob/main/public/javascript/controllers/bridge/form_controller.js)"
  },
  {
    "id": "LBfi1H7TRIo",
    "title": "Turbo Native 6. Strada. Navigation Button Component",
    "description": "Unfortunately currently TurboNative + TurboNavigator + Strada don't just work out of the box (yet). The setup is quite tricky.\nI installed Strada the same way it is done in joemasilotti/daily-log. In this episode I will not copy-paste the setup file by file. Rather I will walk through how Strada works when it is already imported.\nWe will also import a Strada Button component.\nStrada git repo: https://github.com/hotwired/strada-ios\nEpisode source code: https://github.com/corsego/tinder/commit/767c5b530612abb1e016af12cccecaf8c22967c1"
  },
  {
    "id": "WBudjIyjd0Y",
    "title": "Turbo Native 5. Conditional Rendering (only Web/only Mobile)",
    "description": "use html title, conditional rendering with turbo_native_app? helper: https://github.com/corsego/tinder/commit/a5b88ae1d606008d851da2d7b633d9cfebae2862\ndisplay app name in title only for Web: https://github.com/corsego/tinder/commit/8e0d7a09b862d3eaf7347ff62de6687550350d6e\ntailwind turbo-native variant:\nhttps://github.com/corsego/tinder/commit/f7738d4efc16280f37a536dde49535f78ce8bbba"
  },
  {
    "id": "mMqYPRJWueo",
    "title": "Turbo Native 4. Better Authentication flow. Turbo Confirm. Turbo Replace",
    "description": "confirmation modal to sign_out: https://github.com/corsego/tinder/commit/03757800b050af752d672dc1d5cde9b18cfe4a6b\ndon't render devise views as modals: https://github.com/corsego/tinder/commit/cbb5bbf3de81f82a0598ca2e4ab6882d9151229c\nnavbar - do not stack navigation (breadcrumbs): https://github.com/corsego/tinder/commit/9e4b9a24241e11e3b98c02df6775e096351eec97\ngenerate devise views: https://github.com/corsego/tinder/commit/c8f9df797b9fddd2d71cff491fe44ef6c20a0ccd\ndevise forms - do not stack navigation: https://github.com/corsego/tinder/commit/ca4770a89b96226da69e56f26c9281b21418f374\ndevise remember_me forever: https://github.com/corsego/tinder/commit/5cee2c20854205356446c524fd7eceb561f66342"
  },
  {
    "id": "w9jp7deEcR0",
    "title": "Turbo Native 3. Turbo Navigator, Native Modals, PathConfiguration",
    "description": "Install Turbo Native the right way using turbo-navigator branch, open /new, /edit, /sign_up, /sign_in as a modal: https://github.com/corsego/tinder/commit/f669abacf4115276f0bd653fe0125b62d3534c50\nPush Path Configuration JSON from Rails app to iOS app: https://github.com/corsego/tinder/commit/c3da8d266b931f952aa9395d0b07d11f02833abc"
  },
  {
    "id": "IXalvY0upqU",
    "title": "Turbo Native 2. Create new Turbo Native app. Basic navigation and authentication",
    "description": "Generate new Rails app:\nhttps://github.com/corsego/tinder/commit/f33d77a6beab8f8ce958ce97aa102ec442df2f70\nGenerate iOS app:\nhttps://github.com/corsego/tinder/commit/576644e9eb9e15f7b4b534d83d6bfbc8cf01f6ad\niOS - install Turbo Native:\nhttps://github.com/corsego/tinder/commit/cff231a8eb660d36ff3facbfb003cad220f33e2d\nRails - static pages:\nhttps://github.com/corsego/tinder/commit/966ea101fff82a9b30f801c32b2a8cdfc41727e5\niOS - use localhost:\nhttps://github.com/corsego/tinder/commit/e13daaa466b886c63378dca39478bbfbdf4793e7\nRails - install devise for authentication:\nhttps://github.com/corsego/tinder/commit/aab60f384a2b31bd84756242d30444ca2430c00b"
  },
  {
    "id": "TcGXLorlXwQ",
    "title": "Hotwire Native: Getting Started. Build mobile apps with Rails | SupeRails #200",
    "description": "Turbo Native is now deprecated. Use Hotwire Native instead!\nHotwire Native is a combination of Turbo Native + Strada + Turbo Navigator.\nAlso, Strada Components have been renamed to Bridge Components.\nHotwire Native offers much better conventions when starting a new app than Turbo Native did.\n\nHotwire Native is a Native (iOS/Android) wrapper around your Rails app.\nIt is the leanest, fastest approach for you to release a Native app as fast as possible. Because you just render your Web app in a wrapper!\n\nIn this episode we run the demo application and git into its code.\n\nOfficial docs: https://native.hotwired.dev\niOS library: https://github.com/hotwired/hotwire-native-ios\nDemo web app: https://github.com/hotwired/hotwire-native-demo"
  },
  {
    "id": "n9U5bsW2aZ8",
    "title": "RailsWorld 2024 Day 2. Let’s go for a walk together!",
    "description": ""
  },
  {
    "id": "E4OhBY7SU0U",
    "title": "RailsWorld 2024 opening",
    "description": "Walking around the venue and meeting people"
  },
  {
    "id": "hIsjCchSsGk",
    "title": "Trezy Classifier - API to analyse bank transactions | SupeRails #190",
    "description": "The API: https://classify.trezy.io\n\nI built a big part of this API app for a company I've been working with. \n\nThe app allows you to analyse and categorise bank transactions, and companies behind them. Super useful for fintech companies!\n\nIt's one of the coolest projects I've worked on! The backend logic is 🧠🧠🧠🧠🧠\n\nToday, we launch on ProductHunt.\n\nEpisode source code: https://github.com/corsego/190-trezy-classifier/commit/ddc6f1ef38a6f777a635dda9b12a163dcb072df1"
  },
  {
    "id": "DTnbnS0U8ps",
    "title": "I'm launching Trezy Classifier on ProductHunt right now",
    "description": "Support the launch: https://www.producthunt.com/posts/classify-by-trezy\n\nI built a big part of this app for a company I've been working with. \n\nThe app allows you to analyse and categorise bank transactions, and companies behind them. Super useful for fintech companies!\n\nIt's one of the coolest projects I've worked on! The backend logic is 🧠🧠🧠🧠🧠\n\nToday, we launch on ProductHunt.\n\nSupport the launch: https://www.producthunt.com/posts/classify-by-trezy"
  },
  {
    "id": "DFbvAt9fNAQ",
    "title": "Build a international company search engine | SupeRails #188",
    "description": "In #181 & #187 we searched French & UK company registries via API.\nNow let's add a country-select field, so that users can search for comanies across legislations in one form!\nThis basically turns our app intro an international company search engine!\n\nWatch the whole episode here: https://superails.com/posts/build-a-international-company-search-engine-superails-188?playlist=build-a-global-company-search-engine"
  },
  {
    "id": "_ky5BUlv9IY",
    "title": "Rails World 2024 ticket winners draw | Friendly Show",
    "description": "Let's find out who's going to Canada! 🇨🇦\n\nInitially I posted the contest here:\n- https://twitter.com/yarotheslav/status/1829232144654516720\n- https://www.linkedin.com/feed/update/urn:li:activity:7234983793789476864?utm_source=share&utm_medium=member_desktop\n- https://www.linkedin.com/posts/yshmarov_railsworld2024-activity-7234981294030372865-rBLS?utm_source=share&utm_medium=member_desktop"
  },
  {
    "id": "szV8GRb-s7U",
    "title": "Find and update UK🇬🇧 company information | SupeRails #187",
    "description": "Previously I wrote about finding a company in the French national company database.\n\nNow let’s search 🇬🇧UK companies via API.\n\nWatch the whole episode & access the source code here: https://superails.com/posts/find-and-update-uk-company-information-superails-187"
  },
  {
    "id": "C1N3Lpou6EA",
    "title": "Mention users with TributeJS | SupeRails #186",
    "description": "In episode #95 we focused on parsing text and converting hashtags and mentions into links. Now let's add an @ mentions dropdown to any text field, so that you can select a user that you want to mention!\n\nEpisode source code: https://github.com/corsego/186-mentions-tributejs\nBased on this blogpost: https://blog.corsego.com/create-mentions-tribute-js\n\n0:00 How mentions work\n1:35 Scaffold Messages\n2:23 Install TributeJS, display mentions dropdown\n5:24 CSS styling for mentions dropdown\n6:10 Scaffold Users \n7:29 Search users in database\n16:00 Scaffold Mentions\n16:42 Create mentions in database \n21:08 Display mentioned usernames as links in text"
  },
  {
    "id": "0niid7vgtEM",
    "title": "Social Share button (very important for PWA & Turbo Native apps) | SupeRails #185",
    "description": "If you open an app in a browser, you can easily copy the URL or click the native Share button.\n\nBut if you are running the app as a PWA or Turbo Native app, there is no native browser sharing functionality.\n\nThus, you will likely want to add a native share button.\n\nMany apps like Instagram & WhatsApp do this.\n\nLet's implement a native Share button using the Navigator.share browser API.\n\nEpisode source code:\nBased on this blogpost: https://blog.corsego.com/stimulus-share-button"
  },
  {
    "id": "4IU7QuYzAkE",
    "title": "Getting Started with Turbo Native in Ruby on Rails | SupeRails #184",
    "description": "Let's learn to build mobile apps with Hotwire using Turbo Native!\n\n0:00 Run and explore the Turbo Native Demo app\n5:25 What is Strada?\n7:22 Run Turbo Native on any URL\n8:44 Create a new Turbo Native app\n12:30 The current best way to create a new app\n\nTurbo Native iOS: https://github.com/hotwired/turbo-ios\nTurbo Navigator branch: https://github.com/hotwired/turbo-ios/pull/158\n\nShoutout to @joemasilotti - he has great examples on YouTube, his blog, and GitHub for building Turbo Native apps 🙏 I learned a lot from him."
  },
  {
    "id": "CoEHgdpLsZU",
    "title": "Rails 7.2 Rate limiting for Devise - Guard your app from spam and bots!",
    "description": "🔒 Secure your app from password-guessing attacks, spam, and abuse by rate-limiting your sign-up and sign-in pages.\n\nI always rely on the wonderful rack-attack gem for this, capping requests per IP within a set timeframe.\n\nNow Rails 7.2 adds native rate limiting out of the box!\n\nLet's add rate limiting to your Devise Sign Up and Sign In pages & secure your app! 🛡️\n\nEpisode source code: https://github.com/corsego/183-rails-native-rate-limiting/commit/54b962dfa0a7e6407f99e4b3251e61edd5df964e\nBased on this blogpost: https://blog.corsego.com/rails-rate-limiting"
  },
  {
    "id": "zCuM2_RB7i8",
    "title": "Ruby on Rails #182 Build an OpenGraph image generator app",
    "description": "Want to build a micro-SaaS?💰💰\nHow about an OpenGraph image generation tool?\nThis app will automatically take screenshots of URLs and turn them into custom opengraph-friendly images.\nWatch the whole episode: https://superails.com/posts/182-build-an-opengraph-image-generator"
  },
  {
    "id": "rNSKEKuyLIw",
    "title": "Ruby on Rails #181 Search and Autocomplete French Company Information | Trailer",
    "description": "Let's solve a common business problem! \nAllow users to find a company in a public company registry via API and autocomplete company info.\n\nWhile building this feature you will also learn how to use and combine Rails frontend tools like RequestJS + Turbo Streams + StimulusJS in an elegant way!\n\nIn this example we will search French open company data.\n\nTo make it work with other countries, you will need just a few tweaks like updating the search URL.\n\nWatch full episode here: https://superails.com/posts/181-search-and-autocomplete-french-company-information"
  },
  {
    "id": "rqAlxf8MOkE",
    "title": "#180 EU eInvoicing. PDF to XML to JSON. FaxturX, ZUGFeRD | Trailer",
    "description": "Watch the whole episode here: https://superails.com/posts/180-eu-einvoicing-pdf-to-xml-to-json-faxturx-zugferd\n\nI will walk you through the codebase of a Ruby app that lets you upload PDF documents and extract XML metadata, if the PDF document is eInvoice-compliant according to the EU eInvoice regulation.\n\nNext, we will parse the XML and extract useful information like invoice name, date, amount, sender & receiver names & VAT numbers.\n\nSubscribe to SupeRails PRO to have watch the whole episode and access the source code!\n\nEpisode source code: https://github.com/corsego/facturx-reader\nBased on this blogpost: https://blog.corsego.com/factur-x-einvoice"
  },
  {
    "id": "P2_GMNgHVUg",
    "title": "#179 NEW Rails 8 Authentication Generator: Build Registrations feature",
    "description": "Rails will now have a default authentication generator out of the box!\n\nIn the previous episode we ran the generator, allowing existing users to sign in. \n\nNow let's add a \"registrations\" feature, that will enable sign ups (creation of new users). \n\nI hope this feature gets merged into Rails too!\n\nYet, to make this authentication solution viable in production, you will still need to add AT LEAST \"password reset\" and \"email confirmation\" functionality.\n\nI highly recommend to use Devise for authentication, rather than reinvent the wheel.\n\nEpisode source code: https://github.com/corsego/178-rails-8-authentication-generator/commit/b94b002dc7c4c685fb86956cab1fc3e3d9233473\nBased on this blogpost: https://blog.corsego.com/rails-8-authentication-registration"
  },
  {
    "id": "bD2oL1lUnKA",
    "title": "#178 NEW Rails 8 Authentication Generator",
    "description": "Recently DHH merged a PR that adds an authentication generator to Rails.\n\nCurrently the generator allows email-password log in for existing users. It does not tackle registrations.\n\nLet’s try it out!\n\nEpisode source code: https://github.com/corsego/178-rails-8-authentication-generator/commits/main/\nBased on this blogpost: https://blog.corsego.com/rails-8-authentication"
  },
  {
    "id": "JIe7ak7APD8",
    "title": "Friendly S2E9 🥑 Avo joins TinySeed 🤑! What will Adrian do with the money?",
    "description": "We talk about:\n- Adrians' worldwide conference tour in the first half of 2024 (Tropical RB, Singapore, Sin City)\n- Yaro & Adrian spending time together at the French Riviera\n- Upcoming conferences (EURUKO, Rails World, FriendlyRB)\n- FriendlyRB plans & speakers\n- Avo future plans (marketplace, no-code/low-code)\n- Hiring for Avo"
  },
  {
    "id": "y1eDh0iELao",
    "title": "Tailwind on Rails #177 Responsive Collapsible Sidebar",
    "description": "Let's add a button to minimise (collapse) the sidebar.\n\nWhen the sidebar is minimised, only link icons (not labels) are visible.\n\nWe will also save the sidebar state across requests.\n\nBased on this blogpost:\nhttps://blog.corsego.com/tailwind-collapsible-sidebar\n\nEpisode source code:\nhttps://github.com/corsego/138-tailwind-layout/commit/280d649360359de1c346741d130d7cd49c9745d2"
  },
  {
    "id": "__d_15rP16M",
    "title": "#176 Sign in with Apple. Devise Omniauth. | Ruby on Rails | Trailer",
    "description": "Watch the whole episode here: https://superails.com/posts/176-sign-in-with-apple-omniauth-social-log-in-with-devise\n\nAdd a \"Sign in with Apple\" button to your app! \nStep 1: Create an apple developer account ($99)\nStep 2: Generate the API keys\nStep 3: Fix gem omniauth-apple"
  },
  {
    "id": "_cKPObi0QyE",
    "title": "#175 Sell access to a Github Repository. Sell your code!",
    "description": "Allow users to pay for your product via Stripe Payment Link.\nYou can place the payment link on any website.\nWhen a user pays, a webhook will be sent to the Rails app.\nThe webhook will grant the user access to a private GitHub repository. \nStart selling your code now!\n\nBased on this blogpost:\nhttps://blog.corsego.com/github-api-collaborators\nEpisode source code:\nhttps://github.com/corsego/175-github-api/commit/f739888032d4e2af64f56b2efa49eeb05ff79e80\n\nStripe gem:\nhttps://github.com/stripe/stripe-ruby\nGithub API gem:\nhttps://github.com/octokit/octokit.rb\n\nThanks for watching! 🙏"
  },
  {
    "id": "l9iDBiaUd6g",
    "title": "Rails #174 i18n. Test translations, refactor, and launch into production! 🚀 | Trailer",
    "description": "Watch full episode here: https://superails.com/posts/rails-174-i18n-test-translations-refactor-and-launch-into-production\n\nThe feature is ready, but the code is not production-grade yet.\nLet's refactor the code and write some tests for translations.\nThis way we can go from \"good\" to \"great\"! 💪"
  },
  {
    "id": "ovH0ROXC1cI",
    "title": "Rails #173 i18n. automate translations with AI and save $$$$ | Trailer",
    "description": "Learn how we used an AI tool to save €9000/year on translation apps.  Watch full episode here: https://superails.com/posts/rails-173-ai-automated-translations"
  },
  {
    "id": "UjHWY2LXfGg",
    "title": "Rails #172 i18n. Set language preferences in session or in User model",
    "description": "🚫 The official Rails Guides do not recommend to store locale in session/cookie.\n\nLet's break the rules! 😈\n\nIn this episode:\n- not logged in users store language preferences in the Session.\n- logged in users store language preferences in User model.\n\nThis way our routes will stay clean 🙌\n\nEpisode source code (premium subscribers only): https://github.com/yshmarov/superails/pull/251/commits/ab9af4c1dedba5f9a6d9283be32862c3690e540d\nBased on this blogpost: https://blog.corsego.com/i18n-select-locale"
  },
  {
    "id": "4m64FHUrEhg",
    "title": "Rails #171 i18n basics. Translate your app for the global audience!",
    "description": "In this episode we make our app available in different languages (Internationalisation).\n\nThere are different strategies to set the current language.\n\nSetting the language in the URL is an easy and RESTful approach.\n\nLet's implement it!\n\nEpisode source code (premium subscribers only): https://github.com/yshmarov/superails/pull/251/commits/da896aa42667b11b044e2899b2cbe69a3c2f5023\nBased on this blogpost: https://blog.corsego.com/i18n-select-locale"
  },
  {
    "id": "pLwieJE7_54",
    "title": "Tailwind on Rails #170 Maintainable Buttons CSS",
    "description": "Please, don't abstract button CSS into a component! It leads to suffering. Don't do this: https://github.com/baoagency/polaris_view_components/blob/main/app/components/polaris/headless_button.rb\n\nUsing inline styles for buttons with Tailwind is also a bad option, because it can be hard for you to update the component everywhere in your app at once.\n\nCSS abstractions with an API similar to Boostrap should be just enough: https://getbootstrap.com/docs/5.3/components/buttons/#sizes\n\nEpisode source code: https://github.com/corsego/138-tailwind-layout/commit/2cd22a45bbed2c79ece73cb7726c4a181ddff5ba\nBased on this blogpost: https://blog.corsego.com/tailwindcss-buttons"
  },
  {
    "id": "1rwKn0Figuo",
    "title": "Ruby on Rails #169 Build a text compare tool. Database record version control | Trailer",
    "description": "I invite you to watch the whole episode here: https://superails.com/posts/diff-app\n\nI will be making a few \"pro\" episodes available on superails.com. This is the first one!"
  },
  {
    "id": "uWZib_jnE0k",
    "title": "Tailwind on Rails #168 Mobile footer navigation",
    "description": "You use your thumb to click on your phone.\nThat's why all mobile apps have footer navigation.\nA good web app should also have footer navigation on a mobile (small) screen!\n\nEpisode source code: https://github.com/corsego/138-tailwind-layout/commit/05552c77d1bf6ec7a5f4a37bea6d96dc58c1e660\nBased on this blogpost: https://blog.corsego.com/sticky-mobile-footer"
  },
  {
    "id": "XO-YRWyXjLI",
    "title": "Ruby on Rails #167 Build a PWA",
    "description": "Let's turn an existing app into a PWA by adding a valid Webmanifest and Service Worker.\n\nYou can simply add the files to the /public folder, OR you can do it the Rails 8 way and add manifest.json and service-worker.js to ActionView!\n\nEpisode source code: https://github.com/yshmarov/insta2blog.com/commit/6bdcd957865ecaed5dc7802b5086ad98f6851ab0\nBased on this blogpost: https://blog.corsego.com/rails-8-pwa\n\n0:00 PWA on MacOS\n2:38 Webmanifest \n7:56 Service Worker\n10:05 The Rails 8 Way"
  },
  {
    "id": "dU3Znt5E8Bg",
    "title": "Ruby on Rails #166 PWA (Progressive Web Apps) in Rails 8",
    "description": "Make your Rails website behave like an installable app by turning it into a PWA.\n\nAll new Rails apps will have a webmanifest by default, meaning your app will be a Progressive Web App out of the box!\n\nIn this episode we will explore how PWAs work.\n\nBased on this blogpost: https://blog.corsego.com/rails-8-pwa"
  },
  {
    "id": "hrIvHnbdJJI",
    "title": "Friendly S2E8 Radoslav Stankov does not need Hotwire",
    "description": "One more cool cat from BalkanRuby!\n\nThis time we talk to Rado ex-producthunt, building his own product - AngryBuilding.\nHe is the only developer and has a team of non-devs doing business stuff.\n\nHe kindly reminds me that you don't always need \"reactivity\", and full-page reloads are good. Enough for many B2B cases!\n\nYou can learn a lot from Rado about building businesses with Rails.\n\nHis new startup: https://angrybuilding.com\nSlides from his conference talks: https://rstankov.com/appearances\n\nP.S. Sorry for the sound quality on these - we are still experimenting with studio recording 🙃"
  },
  {
    "id": "ditC8DaYeW4",
    "title": "Friendly S2E7 Nick Sutterer - Trailblazer daddy, ViewComponents grandpa, heart of the party",
    "description": "Nick is one of the most fun exciting people to be around!\n\nHe has a few superpowers:\n\n1. Developing unique Ruby tools way ahead of their time\n\nHe created Trailblazer as a better way to structure business logic in Rails apps than Services. Way ahead of DDD! https://github.com/trailblazer/trailblazer\n\nHe created Cells that inspired ViewComponent https://github.com/trailblazer/cells\n\n2. Presenting on stage. So far he did over 100 conference and meet-up appearances! He has a natural charm and can always make you laugh.\n\n3. Heart of the party. Find him on a Rails conference and learn for yourself!\n\nHis only social profile is https://github.com/apotonick"
  },
  {
    "id": "DQ-LEkZAMh0",
    "title": "Stripe Embedded Checkout form",
    "description": "😖 I really dislike Stripe Elements: you have to build and style the checkout form yourself.\n\n🤩 Instead, stripe-hosted full screen checkout is a much better approach where you outsource all the payment logic to Stripe. It looks great!\n\n🥰🥰 But now you can use Embedded Stripe Checkout inside your app and keep your branding!\n\nLet's implement Embedded Stripe Checkout in our app!\n \nText version: https://blog.corsego.com/embedded-stripe-checkout\nEpisode source code: https://github.com/corsego/rails-7-stripe-subscriptions/commit/3bfd4a1ff03c1340c616d71398f23d9394edbce4\n\nSeries source code: https://github.com/corsego/rails-7-stripe-subscriptions\n\nStripe embedded checkout API: https://docs.stripe.com/checkout/embedded/quickstart\nStripe embedded checkout docs: https://docs.stripe.com/payments/accept-a-payment?platform=web&ui=embedded-form"
  },
  {
    "id": "uYqMTriSwaI",
    "title": "Friendly S2E6 Meet Balkan Ruby organiser Genadi Samokovarov 🇧🇬",
    "description": "Since the first moment I met Genadi I felt “this guy is great to be around“!\n\nIn this episode he talks about the 🇧🇬 ruby community, organising conferences, his current work and open source history.\n\nFind Genadi http://gsamokovarov.com/\nBalkan Ruby https://balkanruby.com/\nJoin Sofia local ruby meetup https://rubybanitsa.com/"
  },
  {
    "id": "ns3IydzXeSo",
    "title": "Friendly S2E5 Balkan Ruby! 👽 Irina Nazarova. Making $ on Dev tools 🤑🤑🤑",
    "description": "This week we are visiting Balkan Ruby in Sofia, Bulgaria.\nWe met a lot of people who impact our community.\nIn this episode we discuss Sustainable Open Source with Irina Nazarova, CEO of very very @evil.martians \n\nhttps://balkanruby.com/"
  },
  {
    "id": "opT7xofHh2U",
    "title": "Be like the BalkanRuby guys!",
    "description": ""
  },
  {
    "id": "-AyGudAe1mc",
    "title": "#165 Manage active sessions. Log out from another device remotely. Important security feature!",
    "description": "In some cases to enhance security of your application you will want to allow users to see all the devices/browsers they are logged in with. You would also provided a button to sign out of a device/browser.\n\nHere's how you can do it!\n\nEpisode source code: https://github.com/corsego/165-security-manage-active-sessions/commit/028064768ecb033dc19d7f3179bb52d963a734f4\nBased on this blogpost: https://blog.corsego.com/secutiry-manage-active-sessions"
  },
  {
    "id": "3129Se2NcOc",
    "title": "#164 The illegal loophole to scaffold Tables in Rails 7",
    "description": "Since Rails 7 you can not scaffold tables in the index view any more. Instead you have a list of cards. Here's how you can bring back tables to your scaffolds.\n\nDHH hates this one simple trick!\n\nEpisode source code: https://github.com/corsego/164-scaffold-erb-tables/commit/bbcd2d880824dfb838564b86024a8dd902028cf1\nBased on this blogpost: https://blog.corsego.com/custom-scaffold-templates\n\nResources:\n- https://www.reddit.com/r/rails/comments/1bb0ixo/why_did_rails_7_kill_scaffolding/\n- https://www.reddit.com/r/rails/comments/pztx9g/scaffold_index_no_longer_generating_html_tables/\n- https://discuss.rubyonrails.org/t/back-again-after-a-long-time-rails-7-scaffolds-table-view/80967\n- https://stackoverflow.com/questions/71357307/no-table-view-after-crud-scaffolding\n- https://github.com/rails/rails/pull/41210\n- https://github.com/rails/rails/blob/ecb2850a04adc6c6665f9a30a1d60ca73965ccfa/railties/lib/rails/generators/erb/scaffold/templates/index.html.erb.tt"
  },
  {
    "id": "CxWPMnRoud0",
    "title": "#163 Instant page loads with Turbo 8 prefetch (aka InstantClick)",
    "description": "Turbo 8 has been released! One of the core new features - hover-click preload acceleration (ala InstantClick).\n\nInstantClick makes an assumption about potential user behaviour: now whenever you hover on a link, it will fire a GET request to retrieve that page. So when you actually click on the link, it will load faster.\n\nRemarkable how effective it is for perceived performance. It can save hundreds of ms saved in many cases!\n\nEpisode source code: https://github.com/corsego/163-turbo-8-instantclick-prefetch/commit/bf7e1b5971aa8aa31341c4ccec96212640514b41\nBased on this blogpost: https://blog.corsego.com/turbo-8-instantclick-prefetch"
  },
  {
    "id": "UuKj8mAa1Ok",
    "title": "Friendly S2E4 Ufuk says there is definitely NO consipracy around RailsConf 2024 in Detroit!",
    "description": "Audio version: https://www.friendly.show/2278525/14689994-why-detroit-meet-ufuk-the-secret-organizer-behind-rails-conf-2024\n\nRailsConf is happening on 7-9 of May!\n\nAnd Ufuk is the lead organizer!\nHe recently joined the Ruby Central board of directors.\nHe is on the Shopify infrastructure team, working on making Ruby on Rails a better ecosystem 💪\n\nWe discuss:\n-    What makes RailsConf 2024 special?\n-    What is \"RubyConf Hack Day\"?\n-    Where does the ticket price come from?\n-    Why is RubyCentral so important to our community?"
  },
  {
    "id": "QjPwaIK-sgQ",
    "title": "Rails #162 Gem Ferrum - Generate PDF and PNG with Headless Chrome API. No Puppeteer, no NodeJS",
    "description": "Thanks to URLBOX for sponsoring today's video! Convert URL to PNG/PDF with UrlBox: https://urlbox.com/screenshot-api?ref=sr Urlbox also helps to block Ads & Popups, Bypass Captchas, Auto-Accept Cookies\n\nFerrum is Headless Chrome Ruby API.\n\nFerrum lets you open a headless chrome browser and perform different actions:\n- visit web page\n- HTTP authenticate\n- find element by css/id\n- click link\n- fill in input field\n- take screenshot of a page\n- save page as PDF\n\nIn this episode we will:\n1. open page in new tab in PDF format\n2. save page as PDF\n3. save page as PNG\n\nUnlike Grover, it does not require Puppeteer and NodeJS dependencies!\n\nEpisode source code: https://github.com/corsego/158-gem-ferrum/commit/34cd066e06955a84b8326348aa8b99efdbfc7e51\nBased on this blogpost: https://blog.corsego.com/gem-ferrum-generate-pdf\n\n0:00 Thanks, URLBOX\n2:01 why Ferrum\n4:48 URL to PNG\n6:10 URL to PDF\n7:07 open page as PDF\n10:28 CSS for media print\n12:10 attach invoice as PDF with ActiveStorage\n16:45 attach invoice as PNG\n22:11 PendingConnectionsError"
  },
  {
    "id": "9qLpix5XDLc",
    "title": "Rails #161 Import ICS Calendar events with Gem iCalendar",
    "description": "I love building calendars! \nICS is the default format for a calendar file.\nToday we'll learn to read an ICS file and import it into our app.\n\nRecently 37signals released \"Import ICS events\" as a new feature in Hey Calendar.\nYou can do it too!\n\nEpisode source code: https://github.com/corsego/161-import-ics-calendar-events/commit/0e3704fc5728af60df6bc24f38062f46abfda4ba\nBased on this blogpost: https://blog.corsego.com/import-ics-to-calendar\n\n0:00 read the ICS format\n2:00 iCalendar gem, parse ICS in rails console\n4:24 Form to upload ICS file and save in database\n10:00 Upload multiple ICS files\n12:15 Write tests"
  },
  {
    "id": "pZHqmnvzXts",
    "title": "Friendly S2E3 Meet SQLite Jesus, Stephen Margheim",
    "description": "Steven is on a mission to make SQLite good enough for production.\n\nWe talked about:\n- SQLite and Litestack\n- contributing to open source\n- being \"the guy\" in a niche, creating your own luck"
  },
  {
    "id": "mjS8ndhlcBU",
    "title": "Rails #160 Meta Tags. Open Graph, SEO, social sharing previews",
    "description": "Meta tags help to render your website nicely in the browser, in search engines, and in social media link previews.\n\nFavicon, site name, page title, page description, and page image are the most impactful meta tags.\n\nLearn to set meta tags without and with gem \"meta-tags\".\nLearn to preview meta tags by specialised crawler tools.\n\nEpisode source code: https://github.com/corsego/160-meta-tags-og/commit/d29de3545657f0fcf5caefda8f705d8c616cb724\nBased on this blogpost (it contains links to all the crawler tools): https://blog.corsego.com/meta-tags-without-a-gem\n\n0:00 How do meta tags work\n3:30 meta page title\n5:09 meta favicon\n9:14 meta description\n7:10 meta tags abstraction\n9:15 meta image\n10:38 page-specific meta tags\n12:28 install and use gem meta-tags"
  },
  {
    "id": "veRsh8TYEDw",
    "title": "Rails #159 Access localhost anywhere with Ngrok",
    "description": "Ngrok gives a public URL to your localhost. This is useful for testing from other devices, working with external APIs that require a real URL.\n\nBased on this blogpost: https://blog.corsego.com/ngrok\n\nP.S.1. If you hit the limit, consider alternatives!\nP.S.2.. I am not affiliated with Ngrok."
  },
  {
    "id": "08UCWWGKl8k",
    "title": "Rails #158 Build a Calendar from zero. No external dependencies!",
    "description": "A long time ago I thought it impossible to build a calendar on your own; I thought you need an external library. However building a calendar is much easier than you think!\n\nLet's build a monthly view calendar, and populate it with events!\n\nEpisode source code: https://github.com/corsego/158-calendar-app/commit/1702b7f385b80064635a96b0038aaf451999659b\nBased on this blogpost: https://blog.corsego.com/build-a-calendar-from-zero\n\n0:00 Existing solutions\n2:27 Build a monthly calendar\n13:24 Highlight Today's date\n15:00 Display events\n19:00 Reusable calendar wrapper"
  },
  {
    "id": "RBAB2U7NsWs",
    "title": "Friendly S2E2 Amanda Perino. RailsWorld 2024. CFP open. How to become a speaker?",
    "description": "Join the dialogue with Amanda Perino, CEO of the Rails Foundation, as we unpack the intricacies and excitement of Rails World 2024. \n\nAmanda brings her unique perspective to the table, revealing the behind-the-scenes of organizing a top-tier conference in Toronto and how they're shaping it to be an even more engaging and community-driven event. \n\nWe reminisce about past encounters that birthed our podcast and hear updates on both the Rails community's beloved doggo - Milo, and the technical leaps expected with Rails 8.\n\nWhat's more, we take your feedback to heart, promising more networking woven into the fabric of this year's slightly streamlined talk schedule.\n\nOur conversation with Amanda Perino doesn't stop there—venture with us as she sheds light on the electrifying atmosphere of RailsVeld at the Evergreen Brickworks and teases at the global roadmap for future Rails events. \n\nImagine the potential of Rails conferences in places as diverse as Colombia and Slovakia! \n\nPlus, we get a sneak peek into the Rails Foundation's 2024 agenda, focusing on enhancing documentation, education, and marketing for the community."
  },
  {
    "id": "PRe583UzZ0g",
    "title": "Friendly S2E1 Andy Croll - CTO at CoverageBook, Brighton Ruby, RailsConf",
    "description": "Join the conversation with the serial conference organizer Andy Croll, where we talk about how he started Brighton Ruby, why he's still doing it, how he's helping organize RailsConf this year, and about First Ruby Friend and why you should hire junior developers.\n\nhttps://brightonruby.com/\nhttps://firstrubyfriend.org/\nhttps://railsconf.org/"
  },
  {
    "id": "9rhkXYPOlE4",
    "title": "#155 Bonus: Is DocRaptor worth it? Puppeteer vs DocRaptor vs WeasyPrint",
    "description": "In E155 I talked about DocRaptor -  a premium API for generating and storing PDF via the PrinceXML HMTL-to-PDF technology.\n\nToday I am joined by James Paden who explains the intricacies of PDF generation and talks about free alternatives (puppetteer, weasyprint).\n\nI have always considered \"HMTL to PDF\" is a fundamental technology that should be open source.\n\nMy key takeaways:\n- To generate a one-page document, use a headless browser PDF generator.\n- To have full control of mulip-page document formatting, use Prince/Docraptor.\n\nFree HTML to PDF (python) tool recommended by James: https://weasyprint.org/\n\nDisclaimer: This episode is sponsored by @docraptorhtmltopdfdocument8232  . Thanks guys!"
  },
  {
    "id": "EDyZIB8FU-g",
    "title": "Rails #157 Calendar Search with gem Pagy",
    "description": "We are all used to pagination by clicking a prev or next page link.\n\nBut what if we could paginate by year/month/day?\n\nSome time ago I asked Domizio Demichelis (@ddnexus), the creator of Pagy gem, this question. And it resulted in the creation of Pagy::Calendar!\n\nLet's explore how we can add calendar pagination to our app and make it useable.\n\nEpisode source code: https://github.com/corsego/157-pagy-calendar/commit/008a13dee887e57a5d6b8c81240950677adf9020\nBased on this blogpost: https://blog.corsego.com/pagy-calendar-pagination\n\n0:00 Calendar pagination demo\n02:20 Install Pagy Calendar\n6:58 Tailwind styling\n7:56 Paginate by year/month/week/day\n11:08 Toggle calendar and normal pagination\n12:58 Create an event for current date\n17:04 Fix bug with max year being wrong\n19:25 redirect back to page in calendar\n22:11 link to Today"
  },
  {
    "id": "sUS67V3y2YM",
    "title": "Friendly S1E10 Finale. 2023 summary, 2024 plans. What's coming to Rails 8?",
    "description": "Season 1 finale!\n\nToday we talk about:\n- our reflections about 2023 and plans for 2024\n- Rails 8 features\n\nHighlights:\n👶 Being a young father\n⛵️ Sailing\n✈️ visited 5 Ruby events together\n🍻 met new Ruby friends\n🎙️ 10x FriendlyShow podcast episodes\n🎬 68 videos & ✍55 blogposts\n🥑 All-in on AVO\n\n0:00 2023 summary, 2024 plans\n37:25 discussing new Rails 8 features\n\nWill there be a Season 2? Let us know if you want one!"
  },
  {
    "id": "ltoAB6vnZ5o",
    "title": "Rails #156 Turbo 8 Morphing in real life",
    "description": "Turbo 8 adds a new technique of sending HTML over the wire: \"refresh current page, preserve scroll\".\n\nThis new approach opens EASYER ways to render elements on current page without passing too much context to TurboStreams.\n\n👮‍♂️ however there some tricky scenarios that you should be aware of! 🚨\n\nLevel 1: We will try using PageRefreshes on a new Rails app.\nLevel 2: Use page refreshes to live-update nested comments in a real app. \n\nGet access to superails.com source code:\n1. Sign in to superails.com with Github\n2. Leave a comment under the video https://superails.com/posts/rails-156-turbo-8-morphing-in-real-life\n\nEpisode source code: https://github.com/corsego/156-turbo8/commit/24277eb152f3f0a96f693c454b9244f36604f687\nBased on this blogpost: https://blog.corsego.com/hotwire-turbo-8-morphing\n\n0:00 Turbo 8 intro\n2:44 Update Table with TurboStreams\n6:10 Install Turbo8, enable morphing\n10:16 preserve some elements after morph\n11:46 live updates\n16:18 Turbo Morphing in a real app"
  },
  {
    "id": "zP6SST7xY-I",
    "title": "Friendly S1E9 Mariusz Koziel - Ruby community in Poland, how to become CTO and CEO",
    "description": "Mariusz is an old friend of ours. Over the last few years we've chilled 🍻 at many events around 🇪🇺\n\nHe works at an iconic ruby consulting shop in Warsaw, Poland (Visuality), where he was recently promoted from CTO to CEO.\n\nMariusz gives back to the 💎 community by organizing local meetups (Warsaw, Lodz) and organizing conferences.\n\nIn July 2023 he organized the first \"Warsaw Community Conference\".\n\nJust 6 months later, he is organising the second edition of Warsaw Community Conference on 02 Feb 2024.\n\nIt can be a great opportunity to visit Warsaw and meet old friends!"
  },
  {
    "id": "i_cNw4APRDg",
    "title": "#155 Generate, store, email PDF invoices. DocRaptor API, HTML to PDF, ActiveStorage, ActionMailer",
    "description": "Let's solve a classic problem: generate an invoice and email it as PDF to a client.\n\nHistorically I would do it with gem wicked_pdf. But the underlying technology wkhtmltopdf is now Archived!\n\nSo, we need to find other solutions.\n\nDocRaptor is an affordable API wrapper around the expensive Prince technology, that gives you a lot of options for rendering and storing PDF.\n\nEpisode source code: https://github.com/corsego/155-docraptor/commit/0cce2a5367ae4222fc5bd3bc8f70f1a75f75ebe1\nBased on this blogpost: https://blog.corsego.com/docraptor-html-to-pdf\nPodcast talking about Docraptor: https://www.indierails.com/15\nDocraptor gem: https://github.com/DocRaptor/docraptor-ruby\nDocraptor ruby docs: https://docraptor.com/documentation/ruby\nDocRaptor: https://docraptor.com\n\nP.S. In the episode I forgot to mention another powerful feature that I love: generating a PDF from an URL.\nP.S.2. Docraptor pricing is per document, not per page!\n\n0:00 The PDF problem\n4:50 Demo of Invoice app\n6:15 Generate a PDF with DocRaptor\n10:20 Generate an Invoice PDF \n13:15 PDF layout file\n14:51 Store PDF with ActiveStorage\n21:37 Preview, download PDF\n27:15 Email the PDF\n30:47 DocRaptor document hosting\n34:50 Final Demo\n37:50 Final thoughts"
  },
  {
    "id": "9mkoJEQgdU0",
    "title": "Rails #154 Avo 3 upgrade",
    "description": "AVO 3 was released a few days ago.\nI use AVO to manage posts, playlists, tags, comments and users in Superails.com.\n\nFollow me as I upgrade Avo 2 to Avo 3!\n\nAvo3 announcement: https://avohq.io/blog/avo-3-launched\nAvo github: https://github.com/avo-hq/avo\nAvo3 upgrade guide: https://docs.avohq.io/3.0/avo-2-avo-3-upgrade.html#refactor_the_grid_view_api\n\nEpisode source code: currently private, leave a comment if you want access!\n\n0:00 bundle update avo3\n2:10 gem avo_upgrade\n3:54 fields\n6:22 search\n8:30 licence\n8:58 actions\n9:35 grid\n11:20 filters\n12:16 lambda resource\n12:56 grid FIXED"
  },
  {
    "id": "DKKhTutLT5U",
    "title": "Rails #153 Refactoring Hotwire Modals",
    "description": "I AM SORRY for not providing the complete, best approach right away.\n\nIn E151 we connected turbo frame \"modals\" with the html dialog element.\n\nHowever this approach was not optimal:\n- We were needlessly adding a stimulus controller on the BODY html tag;\n- dialog html was present in the layout file, even if we do not need it right now;\n\nLet's clean up the mess and make our modals even better! ✨\n\nSpecial thanks to @ledockol for pushing me on this one! 💪\n\nEpisode source code: https://github.com/corsego/151-dialog-turbo-modals/commit/6f4869005c28aca372319cc4f0f9e7e1ddd8a0e1\nBased on this blogpost: https://blog.corsego.com/turbo-modal-dialog#refactoring\n\n0:00 old implementation\n0:38 I AM SORRY\n1:12 move modal dialog from body to new.html.erb\n5:40 reusable dialog wrapper\n7:59 restrict opening modals in new tabs"
  },
  {
    "id": "OZuLvOYy1Ss",
    "title": "Ruby on Rails #152 Custom Turbo Streams. How to redirect from a form that is inside a turbo frame?",
    "description": "How to redirect from a form that is inside a turbo frame?\n\nThis is a very specific question that you will definitely have after working with Hotwire for some time.\n\nThere are many possible solutions, some better that the others.\n\nLet's explore the problem and different strategies to solving it:\n1. add and click a hidden link\n2. new turbo stream redirect action\n3. adding turbo stream helpers and params\n\n0:00 Introduction\n0:49 Full page redirect does not work?\n4:00 Break out of turbo frame does not work?\n4:55 turbo stream hidden link\n10:50 do not cache hidden link\n12:42 Create a New Turbo Stream Action (best redirect)\n14:56 A Turbo Stream action with params (more complicated)\n19:50 Final demo\n\nEpisode source code: https://github.com/corsego/151-dialog-turbo-modals/commit/c2cecbae1da1e327f8ad91c403531a8ec738a3d1\nBased on this blogpost: https://blog.corsego.com/custom-turbo-stream-actions"
  },
  {
    "id": "BnsZ7XxsGPg",
    "title": "Friendly E8 Andrea Rocca, Hotwire Cookbook, Rails UI, and flying foxes",
    "description": "Surprise surprise: we invited our friend Andrea to the FRIENDLY show!\n\nWe talked about:\n💰 How Andrea switched to programming and became CTO\n🙆‍♂️ Everybody needs a Paul in their life!\n👨🏻‍🍳 who stole the Hotwire Cookbook?\n💅 Rails UI libraries\n🦘 Ruby Australia"
  },
  {
    "id": "DmBBjEQJ2u8",
    "title": "Ruby on Rails #151 Advanced Hotwire modals",
    "description": "63 + 142 = 151. Why?\n\nIn Ep 63 we learnt to build \"modals\" with Hotwire.\nIn Ep 142 we learnt to use the native HTML dialog element\nNow let's combine them to create the perfect modal!\n\nWe will dive deep into navigating within a Turbo Frame and breaking out of it when needed. \nWe will render updates without page refresh on the background with Turbo Streams.\nWe will add a tiny bit of StimulusJS to control the modal.\n\nWe get to play with the whole Hotwire stack for this advanced behaviour!\nI am really proud of this episode.\n\nEpisode source code: https://github.com/corsego/151-dialog-turbo-modals/commit/8864d6aab49ccdeada8cfa43bdf1208f3fe777af\nBased on this blogpost: https://blog.corsego.com/turbo-modal-dialog\n\n0:00 Turbo Dialog Modals demo\n1:48 Copy HTML Dialog form Ep 142\n3:13 Turbo Frame within modal\n7:00 Navigation within modal\n8:50 Close modal after create\n12:40 Add new comment to the list\n14:20 Clean up modal after close\n17:01 Edit, Show, Destroy within modal\n20:44 Perfect Turbo Modals: Final demo"
  },
  {
    "id": "7XPbihY6HGI",
    "title": "Ruby on Rails #150 Global Search",
    "description": "\"Global search\" allows you to search multiple attributes of multiple models in a single search form.\n\nFor example, on superails.com when you perform a search in the navbar you get results for Posts, Tags, Playlists.\n\nWe will build a scalable global search, so that you can easily add new models and attributes to search on.\n\nThis video topic was suggested by @Elgnonvis . Want me to do a video about a topic? Add your ideas in the ocmments.\n\nEpisode source code: https://github.com/corsego/150-global-search/commit/6c25c09caac09a14056d570f389b56303ee97470\nBased on this blogpost: https://blog.corsego.com/search-multiple-models\n\n0:00 Global Search examples\n2:02 Basic global search\n11:02 Advanced global search\n23:30 Final demo"
  },
  {
    "id": "Q6eTjFYXlFM",
    "title": "Rails #149 DataTables - Filters. Form fields OUTSIDE form. Checkboxes, radio buttons",
    "description": "Previously we created a table that we can search and sort using gem Ransack, and paginate using gem Pagy. \nWe also made results update without page refresh using Hotwire Turbo Frames.\n\nNow let's go DEEPER and have search in the navbar and FILTERS in the sidebar.\nTo do this, we will have to have HTML form fields OUTSIDE of a form. This is an HTML and ERB challenge.\n\nWe will also cover\n- form.select vs select vs select_tag\n- radio_buttons\n- collection_check_boxes\n\nAnd this is what I call LAYERED DESIGN. PROGRESSIVE ENCHANCEMENTS. STEP BY STEP.\n\nEpisode source code: https://github.com/corsego/147-datatables-ransack-pagy-search-sort-paginate/commit/1344c9ce0e4f12fb2bb610840d234ddab3c1970c\n\n0:00 Final demo, Filters examples\n2:40 Multiselect \n4:26 Multiselect checkboxes\n7:40 Sidebar\n8:46 Form Fields outside Form?\n11:30 IT'S AMAZING\n11:54 Select in sidebar\n12:54 Radio buttons in sidebar\n17:20 Dive deeper: Form Select vs Select vs SelectTag"
  },
  {
    "id": "Dmpkp69x6xw",
    "title": "Friendly Show E7 October summary, Brovember plans",
    "description": "I think it was one of our most chill, relaxed episodes.\nTake a break and join us as we discuss:\n\n- Building a new Rails starter kit?\n- Rails UI frameworks?\n- GoodJob vs Sidekiq/Redis?\n- Best way to do Multitenancy?\n- Devise vs other authentication approaches?\n- Avo 3 release date, Avo-2025 UI features \n- Providing feedback to software\n- How to make superails.com better?\n\nShow notes:\n\nGet Helvetic.rb tickets: https://helvetic-ruby.ch/\nHelvetic.rb fondue evening RSVP: https://ruby.social/@marioschuettel/111296355470789293\nNotion sharding article: https://www.notion.so/blog/sharding-postgres-at-notion\nPhlex UI: https://www.phlexui.com/"
  },
  {
    "id": "JUI2Y5tFxj4",
    "title": "Rails #148 DataTables without page refresh using Hotwire Turbo Frames",
    "description": "In the previous episode we added Search, Sort, and Pagination to a data table.\nTurbo Frames will help us make it work WITHOUT PAGE REFRESH!\nHowever we will have to solve some potential problems (page refresh, URL, update, redirects).\n\nEpisode source code: https://github.com/corsego/147-datatables-ransack-pagy-search-sort-paginate/commit/8f4ed9a855cc626a8e71a428cbae714f82daf98b\nBased on this blogpost: https://blog.corsego.com/turbo-hotwire-custom-search-without-page-refresh\n\n0:00 initial state of data tables, search, pagination\n1:50 search without page refresh\n4:10 search as you type (without clicking submit)\n4:36 update URL as you search (turbo-action advance)\n5:25 autosubmit after selecting in a dropdown (without clicking submit)\n6:09 update URL as you sort\n6:55 break out of turbo frame\n9:22 clean up and summary"
  },
  {
    "id": "8ziZFNpvzBg",
    "title": "Rails #147 DataTables - search, sort, pagination with Ransack and Pagy",
    "description": "Datatables - tables that you can search, sort, and paginate.\nGem Ransack is an great tool that I use in most of my apps to add search and sort.\nLet's dive deep into how we can use Ransack!\nAt the end, we will also add pagination of our search results with gem Pagy.\n\nWhen I was starting this channel, a \"Ransack\" video was one of my first ideas.\nBut ransack is a tool that has so many features, I just didn't know how to approach it in an easy-to-learn manner.\nI hope you enjoy the example usecases I demonstrate in this screencast.\n\nEpisode source code: https://github.com/corsego/147-datatables-ransack-pagy-search-sort-paginate/commit/6581e1311af36870a6cddce883274ea803b4b153\n\n0:00 DataTables example\n1:40 Ransack SORT\n7:13 Ransack SEARCH\n9:15 highlight search results\n10:15 Date search fields\n11:53 Select fields\n13:45 One search field for many attributes\n14:50 Search association\n19:43 Ransack settings\n22:08 Pagination with Pagy\n24:20 Search, Sort and Pagination works!"
  },
  {
    "id": "urqESWSVzH0",
    "title": "Ruby on Rails #146 Generate Barcodes with JsBarcode. StimulusJS, Importmaps",
    "description": "This episode is not what you expected, not what you asked for, and not what you deserve.\n\nPreviously, in episode 56, I talked about generating barcodes with gem \"Barby\" and storing them in ActiveStorage.\n\nBut really, why would you want to STORE a programatically generated file (where the result is always the same)? Why not just generate and display it on the client?\n\nBeing a Full Stack Ruby on Rails dev requires sometimes venturing into the JS world; acknowledging that it's easier to do some tasks on the client side. This is one of the cases.\n\nEpisode source code: https://github.com/corsego/146-jsbarcode-stimulus-importmaps/commit/d55bbede43fd374cd97d7a2796b609dcaaf57513\nBased on this blogpost: https://blog.corsego.com/jsbarcode\n\n0:00 Why use Javascript for Barcodes?\n1:35 Auto-generate barcodes for products\n3:14 use JsBarcode with importmaps and StimulusJS\n6:58 customize the barcode (encoding, size, color)"
  },
  {
    "id": "8lkxJbwZaas",
    "title": "Friendly Show E6 RailsWorld, EuRuKo, FriendlyRB",
    "description": "Adrian and Yaroslav completed a Triathlon by visiting 3 Ruby conferences in the span of 3 weeks!\n\nToday we meet to share our fresh emotions after visiting these amazing events.\n\n- EuRuKo (European Ruby Conference) took place in Vilnus, Lithuania (550 attendees)\n- FriendlyRB that was organized by Adrian in Bucharest, Romania (130 attendees)\n- The first ever RailsWorld conference was in Amsterdam, Netherlands (700 attendees)\n- Adrian gave an unconference talk about \"Build Rails apps 10x faster\" at EuRuKo\n- Yaroslav gave a talk \"Hotwire Cookbook\" at RailsWorld about common usecases and patterns for Hotwire"
  },
  {
    "id": "MaoCLWU-Lyw",
    "title": "Walking around #RailsWorld",
    "description": ""
  },
  {
    "id": "8u9fWQtI8B8",
    "title": "559 Ruby developers on a train. Literally on RAILS!",
    "description": "I’m visiting @EuRuKo (European Ruby Conference) in Vilnus, Lithuania right now. \nThey organised a private train to take the attendees around. Everyone on this train is a Ruby Rails developer. \nHow many can you count?"
  },
  {
    "id": "K6DxkcCOzZg",
    "title": "Friendly Show E5 André Arko and how we got RubyGems and Bundler. RubyConf 2023: what to expect?",
    "description": "André is a long-term maintainer for RubyGems and Bundler - fundamental tools of the Ruby community that we usually take for granted.\n\n🎙️ He joins us to tell the exciting history of how RubyGems and Bundler were created and matured over the years, the challenges of working  how the longevity of these tool\n\n💰💰💰 Maintaining a LARGE open source project can become very expensive ($500,000/month) and about where this money comes from.\n\nAndré also talks about RubyCentral (organization that organizes RubyConf, oversees RubyGems and Bundler) and RubyTogether (the financing arm of RubyCentral)\n\nWe also get to hear about future development plans for RubyGems 🚀🙏\n\nFinally, we talk about RubyConf 2023 and what to expect from the grand event 🏆\n\n✈️ Visit RubyConf on 13-15 November in San Diego, USA 🇺🇸: https://rubyconf.org/\n💸 Sponsor RubyGems & Bundler: https://github.com/sponsors/rubytogether\n💸 Sponsor André: https://github.com/sponsors/indirect"
  },
  {
    "id": "CNkuPF9Q8dc",
    "title": "Stripe LIFETIME Subscriptions with Rails 7",
    "description": "In the previous episode I allowed users to purchase Monthly and Yearly subscriptions via Stripe and gain access to subscriber-only content.\n\nNow, let's introduce a \"Lifetime\" plan where a user pays only once and gains access to content without an end date.\n \nEpisode source code: https://github.com/corsego/rails-7-stripe-subscriptions/commit/801f01ff812284ef18f8b39f4bed90498f54f45c\nSeries source code: https://github.com/corsego/rails-7-stripe-subscriptions\nStripe checkout API: https://stripe.com/docs/api/checkout/sessions/object"
  },
  {
    "id": "6SIm2uBSnAM",
    "title": "Stripe Subscriptions with Rails 7",
    "description": "Previously I did a series on making Stripe subscriptions work with a Rails 6 app: https://superails.com/playlists/stripe-saas-subscriptions-app\n\nNow, let's make install Stripe and make subscriptions work from zero on a Rails 7 app!\n\nEpisode source code: https://github.com/corsego/rails-7-stripe-subscriptions/commit/3e8bd229bff7a192e80dd07a0b03703cb9240338\nSeries source code: https://github.com/corsego/rails-7-stripe-subscriptions\nStripe gem: https://github.com/stripe/stripe-ruby\nStripe docs: https://stripe.com/docs/billing/quickstart"
  },
  {
    "id": "OlMtq6yRmI4",
    "title": "Ruby on Rails #145 StimulusJS Hotkeys without any external libraries. It just works!",
    "description": "Bring your app one step closer to pefection:\nAssign keyboard hotkeys to let power users quickly navigate around your app!\n\nFor simple scenarios, you don't need any any libarary dependencies. 15 lines of StimulusJS can get you very far!\n\nIn this episode we will assign keyboard shortcuts to open different links in our application.\n\nThis code is not ruby on Rails specific. It's just HTML & StimulusJS!\n\nEpisode source code: https://github.com/yshmarov/superails/pull/176/files\nBased on this blogpost: https://blog.corsego.com/stimulusjs-hotkeys"
  },
  {
    "id": "vciKLX827B8",
    "title": "Ruby on Rails #144 Why I am replacing Turbo Frames with Streams for ActsAsVotable?",
    "description": "Some server-side rendering problems can be equally solved by either Turbo Frames or Streams.\nEach approach has it's cons and pros.\n\nIn this scenario I first implemented Voting with Turbo Frames.\nThis invoked quite a lot of extra context and calculations when calling a separate posts_controller#show action.\nSo I replaced Frames with Streams that required no extra context outside the current controller action, and explicitly defined the expected server-side rendered HTML (turbo stream) response.\n\n0:00 How ActsAsVotable is set up on Superails.com\n3:28 Turbo Frame refreshes vote buttons\n4:50 Turbo Frames grabs new context\n5:24 Turbo Streams response to replace Frames\n8:37 Conclusion: choose the best tool for the job!"
  },
  {
    "id": "uw8FHVjXnSE",
    "title": "Ruby on Rails #143 Turbo Permanent: persist Audio Video and Search results while navigating pages",
    "description": "Often when you visiting media websites, you will want an audio or video player to keep playing even after navigating to another page (like Spotify).\n\ndata-turbo-permanent is a Turbo Drive feature that makes it very easy to persist (not refresh) elements when navigating to other pages in an app.\n\nOn Superails I use data-turbo-permanent to persist latest search results when navigating around pages.\n\nIn this episode we will keep audio and video playing across page navigation.\n\nAs a bonus, we will look at opening video picture-in-picture when navigating to another page!\n\nEpisode source code: https://github.com/corsego/143-data-turbo-permanent/commit/3a62b6a809d8cdec636f54b1a7da43a005216cd9\nBased on this blogpost: https://blog.corsego.com/turbo-play-audio-across-pages\n\n0:00 Examples of using data-turbo-permanent\n2:13 Use data-turbo-permanent\n3:24 permanent audio player while navigating around app\n4:05 permanent video player\n4:30 trigger picture-in-picture video player when navigating around the app"
  },
  {
    "id": "1Op2ZdYGaGA",
    "title": "Tailwind on Rails #142 Modals with HTML dialog element, Tailwind and Stimulus",
    "description": "HTML \"dialog\" is the new standard for creating \"modals\" with less JS and CSS.\n\nIs now supported by all browsers! 🌍\n\nDialog has some behaviours out of the box:\n✅ centered on page by default\n✅ disables background clicks when open\n✅ can be closed with native HTML (without extra JS)\n✅ includes CSS to blur/dim background by default\n✅ can be closed with Escape key\n\nWe will explore how to open the \"dialog\" modal with JS (Stimulus) and add additional styles and behaviours:\n👉 Tailwind modal styling\n👉 Background color and opacity\n👉 Scroll modal\n👉 Disable background scrolling\n👉 Click outside to close\n\nEpisode source code: https://github.com/corsego/138-tailwind-layout/commit/f5a635631c492c594c7765b078908e1d52aad799\nBased on this blogpost: https://blog.corsego.com/tailwindcss-dialog-modal\n\n0:00 Dialog Modal demo\n1:05 HTML dialog element\n1:59 Separate buttons to close and submit dialog form\n2:52 JS button to open modal\n5:35 show VS showModal\n6:10 prevent background scroll\n7:04 close modal by clicking outside\n9:25 modal background styles\n10:17 scroll modal content\n10:58 default modal width\n11:45 blur background\n12:26 dialog is much more than just semantic HTML!"
  },
  {
    "id": "STfxP4YJc6g",
    "title": "Tailwind on Rails #141 Responsive Content layout: Grid, Flex, Centered",
    "description": "Previously we have created a responsive general application layout and navigation using TailwindCSS.\n\nNow, let's look at a few most common ways of placing content on a page:\n\n1) Responsive column count using GRID\n💻💻 big:\n📜📜📜\n💻 medium:\n📜📜\n📜\n📱 small:\n📜\n📜\n📜\n\n2) center content on a page using AUTO MARGINS\n💻💻 big:\n↔📜↔\n📱 small:\n📜\n\n3) 2 columns on big screen, one column on small screen using FLEX\n💻💻 big:\n📜📜\n📱 small:\n📜\n📜\n\nEpisode source code: https://github.com/corsego/138-tailwind-layout/commit/270e25ba1e489b9cf2c100e76f008504394b9fef\nBased on this blogpost: https://blog.corsego.com/tailwindcss-content-grid-flex\n\n0:00 What we built before\n0:42 Content page examples\n2:20 Content Grid Columns\n6:00 Content Centered\n7:57 2-column Flex layout responsive width\n12:48 2-column Flex layout fixed width\n14:44 Summary"
  },
  {
    "id": "5DHszW8pmR4",
    "title": "Tailwind on Rails #140 Click outside to close Menu with Stimulus-Use",
    "description": "\"Click outside element to hide it\" - this might be one of the most common javascript tasks!\n\nWe will leverage Stimulus-use and it's clickOutside behaviour to trigger an action on a stimulus controller. In our case - to close the dropdown menu.\n\nEpisode source code: https://github.com/corsego/138-tailwind-layout/commit/f58de741ddd87b52ededc1fcee5b7d0b8f67f229\nBased on this blogpost: https://blog.corsego.com/tailwindcss-dropdown\n\nP.S. 🙈 Really, I just forgot to include this feature in the previous episode, so here you go. This might be my shortest episode yet!"
  },
  {
    "id": "vTut_lQJlFE",
    "title": "Tailwind on Rails #139 Advanced Navbar Dropdown Menu",
    "description": "Previously we created a responsive layout with a Sidebar.\nOn a small screen we will hide the sidebar and display a dropdown mobile-only menu instead.\n\nTo make the user experience seamless, it will follow a few common practices:\n- close dropdown by clicking Escape\n- close dropdown if screen size is more than sm (768 px)\n- hide \"main\" area and display ONLY dropdown on page\n- blur \"main\"\n- disable scrolling of \"body\" content\n\nI also think that this lesson is a GREAT resource on understanding how StimulusJS works.\n\nEpisode source code: https://github.com/corsego/138-tailwind-layout/commit/46658fd185b55e14140faa56a9671ba9f02c124a\nBased on this blogpost: https://blog.corsego.com/tailwindcss-dropdown\n\n0:00 Working demo\n1:07 Mobile dropdown menu works on other websites\n2:36 Dropdow menu HTML and CSS \n7:05 Stimuls Navbar controller to open/close dropdown\n10:28 Auto close dropdown menu on big screen\n13:00 Blur background when dropdown is open\n14:16 Disable background scroll\n15:05 Hide main content when dropdown open\n15:52 Close menu with keyboard\n16:54 Dropdown menu style options\n18:02 Steal dropdown style from Tailwind wbsite"
  },
  {
    "id": "mKNb7G-8jL8",
    "title": "Tailwind on Rails #138 Responsive Layout with Sidebar and Navbar",
    "description": "\"Tailwind CSS: It looks awful, and it works.\" - Adam Wathan, TailwindCSS creator\n\nAs of Rails 7, you can automatically install TailwindCSS when generating a new rails app by running rails new -c=tailwind -d=postgresql. \n\nI am super excited that just like me, Adam will be also speaking on Rails World!\n\nIn this mini-series I will cover the main aspects of using TailwindCSS when building a Rails app.\n\nWhen you create a new Rails app, FIRST OF ALL you want to figure out navigation (navbar, sidebar, footer) and UI responsiveness (make it work on all screen sizes).\n\nLet’s build a responsive layout with a sidebar that is replaced by a dropdown on a small screen.\n\nEpisode source code: https://github.com/corsego/138-tailwind-layout/commit/45240dcc6e819919eb53a1a82350c1b3230dad91\nBased on this blogpost: https://blog.corsego.com/tailwindcss-layout\n\n0:00 Intro\n1:15 Demo of Responsive Layout\n1:50 Create Rails app with TailwindCSS by default\n3:40 Build sticky Navbar and Sidebar\n11:40 Responsive layout, hide Sidebar on small screen\n14:10 Add dropdown icon on small screen\n16:00 It works!"
  },
  {
    "id": "-JsZ2o983nQ",
    "title": "Friendly Show E4 Jonathan Markwell about his new SaaS, BrightonRuby",
    "description": "When I was in middle school in 2005, Jon was already🥇pioneering Rails, startups, coworking, conferences, SaaS and other stuff that became 🔥hot over the years. \n\nTake your headphones, go for an evening walk and get inspired by Jon‘s story!"
  },
  {
    "id": "HCfWfOTDpD4",
    "title": "Rails 7 #137 Use ViewComponent to Abstract reusable HTML. Blocks, Slots, Variables",
    "description": "Don't repeat yourself (DRY) applies not only to Ruby code, but HTML and CSS too!\n\nIn this episode we will identify common HTML/CSS elements across some pages in our app and abstract it into a ViewComponent.\n\nA View Component can accept variables and blocks of html to accomodate for the small differences of each of the pages.\n\nView Components is an innovative approach for abstracting view logic elements in your Rails 7 frontend.\n\nThis might not be one of my \"greatest\" episodes, but I had to make it because it displays a great usecase for the right tool.\n\nEpisode source code: https://github.com/yshmarov/superails/pull/98/files\nBased on this blogpost: https://viewcomponent.org/guide/slots.html\n\n0:00 identify duplicate HTML/CSS\n1:25 grenerate component and display variables \n4:22 move duplicate HTML/CSS to ViewComponent\n5:20 display content block in Component\n6:20 optionally full width\n8:35 reuse the Component in other parts of the app\n10:11 ViewComponent Slots\n12:57 Summary"
  },
  {
    "id": "yvB2ZQh1HVY",
    "title": "Rails 7 #136 Highlight link to current page",
    "description": "Highlighting the link to the current page is a very common frontend navigation problem that needs to be solved in all sorts of Rails apps.\n\nIn this episode we will explore different approaches to highlighting link to current page, and write our own universal method for it.\nWe will also explore debugging and writing tests - crucial skills of a software developer!\nFinally, feel free to use active_link_to in your app!\n\nThis can look like a very trivial problem to solve and to record, but in reality it took me more than 8 hours to research all the approaches, write a blogpost, write a script, and record this video. \nI spend my time on finding perfect solutions so that You do not have to!\n\nEpisode source code: https://github.com/corsego/136-highlight-link-to-active/commit/da463fe627df9cd460063ba56183dca2d65b2faf\nBased on this blogpost: https://blog.corsego.com/ruby-on-rails-highlight-linkto-current-page\n\n0:00 Current solutions to highlighting link to current page\n1:28 The problem with RailsDevs approach\n5:30 active_link_to helper that works with blocks and inline\n10:58 Write tests, otherwise I will not approve your Pull Request!\n13:45 Final demo"
  },
  {
    "id": "7MaV5YVkVYM",
    "title": "Friendly Show E3 The Ruby On Rails Interview Bible - Author Nezir Zahirović talks about his book",
    "description": "Get the Ruby on Rails Interview Bible with 20% discount here: https://withkoji.com/@Nezir/su7d \nDiscount coupon: \"SupeRails\"\n\nToday we speak with Nezir Zahirović, author of The Ruby On Rails Interview Bible, about how his first contact with technology and how he got started with development, about the tools he used, and more importantly about a few ideas of what to do to stand out in your future job applications.\n\nWhat is Nezir's favourite gem? - devise\n\nAudio podcast available here: https://friendly.show/episodes/the-ruby-on-rails-interview-bible-author-nezir-zahirovic-talks-about-his-book"
  },
  {
    "id": "XWuQAtVEJLk",
    "title": "Rails 7 #135 Export videos from ANY Youtube channel using Youtube API",
    "description": "How to Get List of YouTube Channel Videos using YouTube API?\n\nI’ve got 150+ videos on @SupeRails Youtube channel, and now I want to list them on my own superails.com website.\n\nI could copypaste the information manually, but that would take ages. \n\nI could use web scraping, but what's the point, if there is an easy to use Youtube API?\n\nIn this episode we will:\n✅ Learn basics of using Google Cloud Console ☁️\n✅ Enable and use Youtube API\n✅ LIST videos from ANY channel\n✅ Get detailed info for any particular video\n✅ Paginate API results\n✅ Store results in our local database 💾\n✅ Use ActiveJob to do it all async\n\nEpisode source code: https://github.com/corsego/135-youtube-api/commit/8f5d71f1b3b52624c1c4986ab045a1b96ce15347\nBased on this blogpost: https://blog.corsego.com/youtube-api\n\n0:00 How to extract videos from Youtube?\n1:20 Enable Youtube Data API in Google Cloud\n2:03 Create API key\n2:20 Install Google API Ruby Client gem for Youtube\n5:45 Make API request to Youtube to LIST videos\n7:25 Make API request to SHOW one video\n8:50 Get video Duration\n10:35 Save API data in Rails database\n12:30 Create ActiveJob to LIST videos\n18:44 Create ActiveJob to get each video and save in the database\n28:17 Schedule video creation jobs inside video list job\n29:35 Run the import job!\n30:56 Final result! Let's look at the imported data"
  },
  {
    "id": "TMezJaW6znw",
    "title": "RailsSaaS in Greece. Andy Croll from CoverageBook, OneRubyThing, BrightonRuby, FirstRubyFriend",
    "description": ""
  },
  {
    "id": "KYS1l7hQXrY",
    "title": "RailsSaaS Greece. Build apps 10x faster. Adrian Marin from AvoHQ #ruby #railssaas",
    "description": ""
  },
  {
    "id": "AWJxi_AyMjM",
    "title": "Friendly Show E2 Adrian and Yaro visited RailsSaaS Conference in Athens, Greece",
    "description": "Today we talk about our awesome times at the Rails Saas conference in Athens last week. We touched on how well the conference was organized, the great talks, and the fantastic people we both met. We felt like in the presence of start and online friends.\nWe also spoke about how important it is to have activities planned outside the conference too and how the people make all the difference.\n\nLISTEN TO AUDIO HERE: https://friendly.show/episodes/adrian-and-yaro-visit-the-railssaas-conference-in-athens-greece\n\nRuby philosophasion: https://twitter.com/adrianthedev/status/1665076373860372483\nEmmanuel from Rails Changelog: https://twitter.com/siaw23\n\nAvo Admin: https://avohq.io/"
  },
  {
    "id": "G0W_xcOA4ow",
    "title": "RailsSaaS conference in Athens, Greece. Jane Portman talking about business challenges of SaaS",
    "description": ""
  },
  {
    "id": "07XQY8nRvd0",
    "title": "Rails 7 #134 Date Range Picker",
    "description": "Daterangepicker is an ultra popular library. Unfortunately, it depends on jQuery. Luckily, there is a re-write that uses vanilla JS: vanilla-datetimerange-picker. \n\nLet's integrate DateRange picker into a Rails app and make search work!\n\nEpisode source code: https://github.com/corsego/134-daterangepicker-rails/commit/b03c27b23f288ddb93bba027d20b7e16c81a3784\nBased on this blogpost: https://blog.corsego.com/datarangepicker-js-ransack\n\n0:00 DateRangePicker demo\n1:00 import DateRangePicker directly\n1:49 store CSS and JS in correct locations\n4:15 search form\n6:20 search query \n9:45 customize the DateRangePicker"
  },
  {
    "id": "FM1XNV5aZjM",
    "title": "Friendly Show E1 Pilot 😬. You need a CS degree to be a programmer? How did you start? RailsSaaS conf",
    "description": "Yaro and Adrian are online and conference buddies that enjoy speaking about development and tech and want to take you in their journey.\n\n🤪 This is our clumsy but spontaneous attempt at podcasting. We had a call on Sunday, scheduled for Thursday, and just went on the call to see how we fare. The rest is history.\n\nFriendly Show website: https://friendly.show/"
  },
  {
    "id": "AlcfyfBSM2A",
    "title": "SupeChat #1 Amanda Perino from Rails Foundation about Rails World",
    "description": "I meet Amanda Perino, the CEO of the newly created Rails Foundation.\nWe talk about what the foundation does and about the upcoming Rails World conference in Amsterdam on 5-6 October, 2023.\n\n0:00 Who is Amanda Perino?\n0:57 Rails World - what to expect?\n2:35 Early bid registration\n4:48 Why four Ruby events within 3 weeks?\n7:35 Call For Papers\n9:56 What does the Rails foundation do?\n11:30 Educational pillar\n13:11 History of SupeRails\n14:21 How to learn Rails from zero?\n17:40 Summary"
  },
  {
    "id": "Qoq6HZ8gdDE",
    "title": "Rails 7 #133 API Pagination with Pagy",
    "description": "If you don’t paginate GET LIST data in your API, most likely you will be giving your API consumers too much data, and adding too much load on your API.\n\nEpisode source code: https://github.com/corsego/133-api-pagination/commit/217084cea158f151479797fcf54512fcc43d2000\nBased on this blogpost: https://blog.corsego.com/api-pagination-pagy"
  },
  {
    "id": "GNRkG-Rc2IE",
    "title": "Rails 7 #132 API Analytics and Rate Limiting",
    "description": "If you don’t limit your API usage, bad users can DDOS your server.\nIf you don’t track API usage, how do you know if it is even used?\nApps like Twitter and Shopify have daily or monthly (30-day) API usage limits\nIn this tutorial we will track API usage per user and add a 30-day max limit of API requests per user.\n\nLearn the best practices from Shopify API and Twitter API!\n\nEpisode source code: https://github.com/corsego/132-api-request-tracking-limiting/commit/92812d49c4ff7666850a1b0bf7821143f811f614\nBased on this blogpost: https://blog.corsego.com/api-usage-tracking-rest-rate-limiting\n\n0:00 Overview of current API app\n2:35 Why Track API usage\n3:50 ApiRequest model\n4:52 Log ApiRequests\n7:10 Limit API requests\n11:25 Display API call limit in header\n15:27 Track API key usage"
  },
  {
    "id": "b7-Jjbvp5fs",
    "title": "Rails SaaS Boilerplates and Starterkits. Trying out Bullettrain for the first time",
    "description": "Sometimes I have a \"new genious app\" idea, but when I start coding it I get demotivated with re-creating all the same functionality for the 100th time:\n- Authentication, SSO\n- Teams and Multitenancy\n- Roles (Authorization)\n- Payments & Subscriptions\n- Responsive layout\n- UI elements\n- Internationalization\n- CI setup\n- Tests for all the basic functionality\n\nThese days there are many starter kits. \nI will try to make a general overveiw and comparison.\n\nI will also try using and understanding the recently open sourced Bullettrain SaaS template, that I have high hopes for!"
  },
  {
    "id": "4_s66AeuM5c",
    "title": "Rails 7 #131 API Documentation with OpenAPI, Swagger, RSWAG. Generate manifest with ChatGPT?!",
    "description": "Public API without GOOD Documentation is useless!\n\nGood API documentation is crucial for helping others adopt and use your public API.\n\nOpenAPI (previously Swagger) offers a standard for API documentation. OpenAPI documenation is basically a structured .yml manifest file. Swagger UI is a tool that reads your .yml file and displays it in a fancy UI.\n\nEpisode source code: https://github.com/corsego/131-api-documenation/commit/29d7c64b926d66acc08681ed0b83b354659fc7f2\nBased on this blogpost: https://blog.corsego.com/learn-openapi-swagger-rswag\n\n0:00 Overview of what we did before\n0:00 Why write API documentation?\n1:26 What is OpenAPI\n3:50 gem RSWAG to display Swagger UI\n7:20 customize Swagger branding\n9:33 Generate OpenAPI manifest with ChatGPT\n11:01 How to use Swagger UI to test API endpoints\n16:03 Summary"
  },
  {
    "id": "2znHac211-Y",
    "title": "Rails 7 #130 API CRUD endpoints",
    "description": "Create an API Controller where you can LIST, SHOW, CREATE, UPDATE, DESTROY records.\n\nEpisode source code: https://github.com/corsego/130-api-crud-endpoints/commit/de101248398714ec367cf3c4dfad7e95c8373d4f\nBased on this blogpost: https://blog.corsego.com/rails-api-bearer-authentication\n\n0:00 Recap of what we already have\n2:00 scaffold Posts, belong to user\n3:45 WTF Format JSON\n5:05 WTF JBUILDER\n6:08 cURL request to access posts\n7:07 Access Posts controller within our API\n11:42 API controller authorization - user can access only his own posts\n13:30 fix ActiveRecord::RecordNotFound error\n14:59 CREATE via API, fix InvalidAuthenticityToken\n16:40 UPDATE via API. Importance of strong params\n18:17 DESTROY via API\n19:20 cleanup API controller\n19:36 summary"
  },
  {
    "id": "fmCqYLwv_l8",
    "title": "Rails 7 #129 API Token generation UI",
    "description": "Allow users to generate and disable API tokens. Users can view the secret token only once, when it is generated using Turbo Streams\n\nAPI tokens are used for Bearer Authentication to the public API that we are building in this app.\n\nEpisode source code: https://github.com/corsego/129-api-tokens-management-ui/commit/c846e088f74f0fbd9fbb4239fe8d292a7b357b51\n\n0:00 Summary of what we built before \n1:22 API token generation on Github\n2:45 Display API tokens\n5:18 Create API token\n9:11 Deactivate API token"
  },
  {
    "id": "6Vheq_8eLso",
    "title": "Rails 7 #128 Faraday CRUD API requests. Communicate between two Rails apps!",
    "description": "In this episode we will send API requests from one Rails app to another!\n\nWhile you can use CURL to make HTTP requests from your console, you would want to use Faraday gem to make HTTP requests from your Ruby app.\n\nHere's how you can make GET, CREATE, UPDATE, DESTROY API requets with Faraday.\n\nEpisode source code: https://github.com/corsego/128-faraday-api-crud/commit/37148c869314b20ea99b08c3e93b091ce52450f5\nBased on this blogpost: https://blog.corsego.com/api-requests-with-faraday"
  },
  {
    "id": "rKJvms0lFmI",
    "title": "Rails 7 #127 cURL for CRUD API requests",
    "description": "7 years ago I was googling \"rails call controller action from console\" 😂. Well, THIS is the way! \n\nAPI let's apps communicate with each other. CURL let's you make http requests to any URL (or localhost) from your command line.\n\nYou can test your API endpoints with CURL. Also, if you know how to use CURL, you don't need external services like Postman to play with your own API.\n\nEpisode source code: https://github.com/corsego/127-curl-with-rails/commit/e99d3ef4b1525a5d61c19eb320d9778ca71168c9\nBased on this blogpost: https://blog.corsego.com/api-requests-with-curl"
  },
  {
    "id": "nrYg7ldwOzM",
    "title": "Rails 7 #126 API from Zero. Bearer authentication",
    "description": "Let's build a public REST API with Rails!\n\nHave you ever obtained API keys to a service, using which you could read and write data? For example, Twitter, Slack or Github API?\n\nIn this mini series we will build an API where users can authenticate via Bearer tokens and perform CRUD actions. We will make API requests via cURL and Faraday, generate API documentation with OpenAPI/Swagger, and write tests for our API.\n\nIn this first episode we will build the backend functionality for users to be able to create API keys and use them to make authenticated requests to your applications public API.\n\nEpisode source code: https://github.com/corsego/126-api-bearer-authentication/commit/24bdf07d38d84528ae551b1e6d065fe3343716b1\nBased on this blogpost: https://blog.corsego.com/rails-api-bearer-authentication\n\n0:00 create an api and make a cURL request \n2:39 ApiToken model. generate tokens for users\n7:55 Bearer authentication via ApiToken\n16:15 render current_api_token and current_user in json response\n17:16 writing tests for API authentication\n21:40 summary"
  },
  {
    "id": "9lD2d97cqt0",
    "title": "Rails 7 #125 Test Devise authentication with Controller and System tests",
    "description": "When setting up a new Rails app with Devise, you should set up your test suite to work with authentication and write controller (integration) and system tests for the authentication flow.\n\nHere’s a reusable approach to setting up your test suite for the long run!\n\nEpisode source code: https://github.com/corsego/125-test-devise-authentication/commits/main\nBased on this blogpost: https://blog.corsego.com/minitest-faker-factory-bot-devise\n\n0:00 tests in generated controllers\n1:34 update routes and make tests work\n3:49 install devise\n6:15 fix duplicate index users on email in fixtures\n7:03 test unauthenticated access\n9:15 devise login in tests\n10:48 system (browser) tests\n19:43 run system tests without browser popup\n20:20 test, test:system, test:all"
  },
  {
    "id": "kW-AEo6V15M",
    "title": "Rails 7 #124 Test omniauth login with controller (integration) tests",
    "description": "Testing is a very important part of app development that I haven't covered a lot before.\n\nPreviously we've added oAuth login for Microsoft & Github. Now, let's mock omniauth authentication with both oAuth providers in our tests.\n\nEpisode source code: https://github.com/corsego/124-test-omniauth/commit/66d848b5405457704e8411865b3f7812b8d43262\nBased on this blogpost: https://blog.corsego.com/testing-omniauth\n\n0:00 walk through initial app setup\n1:30 run test suite, fix errors\n3:40 test Github omniauth authentication\n6:04 test Microsoft Azure omniauth authentication\n9:17 final test run"
  },
  {
    "id": "_5M3lk1pRWU",
    "title": "Rails 7 #123 omniauth with multiple providers",
    "description": "Most often you would like to enable more than one oAuth provider for your app. In this episode I will show a resuable approach to enabling multiple oAuth providers.\n\nIn this episode we will add a second oAuth provider to an existing Rails app, and allow users to authenticate via both omniauth strategies.\n\nEpisode source code: https://github.com/corsego/123-multiple-oauth-providers/commit/253f5e6a0e69f84a528ef0d0fb78eebf83b6884d\n\n0:00 first oAuth provider - microsoft azure\n0:46 install second oAuth provider - github\n3:16 authenticate method in omniauth callbacks controller\n3:55 Dynamic oauth provider authentication handling"
  },
  {
    "id": "3BNJ3G226_o",
    "title": "Rails 7 #122 sign in with Microsoft Azure OAuth and Single Sign-On",
    "description": "Let’s add a “Sign in with Microsoft” button!\n\nMost big corporations use Microsoft to manage their employees email addresses. If you are building a B2B app, you will definitely need to add Microsoft single-sign-on.\n\nMicrosoft Azure has a few oAuth authentication services, and it can be tricky finding the right API service and the right ruby gem to use. \n\nGood news: I've done the research, so that you don't need to! \n\nBased on this blogpost: https://blog.corsego.com/microsoft-azure-omniauth\nEpisode source code: https://github.com/corsego/122-omniauth-microsoft/commit/748452eea6b01f0cb48321e39477d88ab4571381\n\n0:00 different microsoft omniauth gems\n0:46 install azure activedirectory gem\n1:52 Register app on Azure, get Microsoft API client ID\n04:48 generate Microsoft API Secret Key\n5:30 try to authenticate with a Microsoft account\n6:50 make omniauth work with our Rails app\n10:27 Demo: sign in with Microsoft oAuth\n11:11 Track provider and UID\n13:20 Launching in Production"
  },
  {
    "id": "xSkq9vQgT7k",
    "title": "Rails 7 #121 Turbo Broadcasts CRUD Demystified",
    "description": "There are two different ways of serving Turbo Streams \"via HTTP and via Websockets\". The regular HTTP streams send updates ONLY to the user that performed an action, whereas Websocket streams (aka Broadcasts) send updates TO ALL users that are \"subscribed\" to a channel.\n\nin Episode 59 we did an in-deep dive into HTTP Turbo Streams.\nNow we will dive into the magic beneath Turbo Stream Broadcasts and understand the best practices while working with them.\n\nEpisode source code: https://github.com/corsego/121-turbo-hotwire-broadcasts-crud/commit/609c00d0a286ac284dffcc4b5865851294c6cbe4\n\nBroadcaster pattern for Turbo Streams Broadcasts: https://blog.corsego.com/turbo-broadcast-renderer-pattern\nBased on this blogpost: https://blog.corsego.com/turbo-hotwire-broadcasts\n\n0:00 Introduction\n2:22 Basic Turbo Broadcast from model\n5:38 Demistify broadcast_to\n7:39 Demistify broadcast_action_to\n10:15 Broadcast posts count on create and destroy as HTML\n13:31 Broadcast posts count as a partial\n14:20 Invoke Broadcasts from Controller, not Model\n18:32 Broadcaster pattern. Invoke Broadcasts from Console"
  },
  {
    "id": "SZCuEfvs9rc",
    "title": "Rails 7 #120 Active Record Encryption usage and troubleshooting",
    "description": "Active Record Encryption let's you encrypt data that is stored in the database (it's a very useful layer of security in case your database gets exposed).\n\nIn this episode we will add encryption to a few PII and PHI fields. We will encrypt data that is already present in the database, and ensure all new data is safely encrypted.\n\nEpisode source code: https://github.com/corsego/120-active-record-encryption/commit/75ece9c396baee3983358cee68733e3b26420d94\nBased on this blogpost: https://blog.corsego.com/encrypted-credentials\n\n0:00 ChatGPT is confidently wrong\n1:12 What is Active Record Encryption\n2:10 Add encryption to a Rails app\n5:10 Non-deterministic encryption\n5:56 Deterministic encrypyion can be queried\n7:55 Encrypt all existing records\n8:56 Encrypt an integer?\n12:03 Display encrypted values"
  },
  {
    "id": "OZWhN4Gtjos",
    "title": "Rails 7 #119 Trello Clone. Advanced Drag and Drop Sortable Lists with Hotwire",
    "description": "I'm so proud of this one, it should be premium content!\nI've watched all the other youtube videos on this topic and I'm sure this approach is better and more versatile.\n\nAlso this video gives great insight into the thought process and debugging required to complete the feature.\n\nCode deliverables:\n1. Sort Lists\n2. Sort tasks within List\n3. Move tasks between Lists\n4. Persist changes\n\nThis functinality was achived thanks to:\n- gem RankedModel that stores the order of items in a list\n- RequestJS that sends http requests from your javascript to your Rails controller\n- SortableJS that provides the seamless sorting functionality\n\nEpisode source code: https://github.com/corsego/119-trello-drag-drop-save/commits/main\nBased on this blogpost: https://blog.corsego.com/drag-and-drop-stimulus-request-js\n\n0:00 Preview of what we will build, other solutions\n1:15 Build the boilerplate app. List has many tasks.\n7:25 Install SortableJS to sort List elements in the frontend\n11:20 Install gem Ranked Model to track sort order of elements\n20:00 Install RequestJS to make requests to Rails controller from StimulusJS\n25:45 Updating Sort order works!\n26:53 Sort Tasks within a List\n32:50 Sort  Tasks between Lists\n40:05 CSS to stack lists horizontally like Trello\n41:40 Final demo. Advanced sorting works!"
  },
  {
    "id": "N2y3AglGKQ4",
    "title": "Rails 7 #118 Dark mode. Toggle inside your app or use OS default preferred color scheme",
    "description": "Some say that Dark Mode should be an MVP feature.\nIn this episode, we will allow users to toggle light and dark modes inside our app based on system preferences, or manually by clicking a button in our application.\nFor this example, we will not use any CSS framework to achieve this, just raw CSS and Rails cookie storage!\n\nEpisode source code: https://github.com/corsego/118-dark-mode/commit/917ad96b76da599799ee783529b9abc3ee69ba31\nBased on this blog post: https://blog.corsego.com/ruby-on-rails-dark-mode\n\n0:00 Dark Mode in other applications\n1:44 Demo of the final application\n2:45 use OS default light or dark mode\n3:44 toggle light and dark mode within Rails app\n8:07 CSS to conditionally toggle the color scheme\n12:02 Works! Final Demo"
  },
  {
    "id": "IPbrQeMLmzg",
    "title": "Rails 7 #117 Find code security vulnerabilities with Bearer static code analysis tool",
    "description": "I used to work at Bearer together with Guillaume for a year (he's my EX-boss).\nNow they finally made the tool they've been working on public!\nIt's a static code analysist tool (like Rubocop or Brakeman) to find data and security vulnerabilities.\n\nIn this episode I will install the bearer tool and run it on a few repositories, while Guillaume explains the value of using this scanner.\n\nToday Bearer works for Javascript and Ruby, but there are plans to roll it out for other languages.\n\nI personally think that having an extra layer of CI checks wouldn't hurt any app, but it becomes more and more important the bigger your app is. The sooner you start solving \"data security\" issues in your app, the better.\n\nBearer source code: https://github.com/Bearer/bearer\n\nPossible Chapters (not timestamps yet):\n0:00 Met my ex after 6 months apart!\n0:30 Bearer was just made open source!\n1:19 What is Bearer? Who needs it?\n4:18 Does Bearer connect to the database, or does in analyze only the codebase?\n6:13 Install and run Bearer scanner\n8:10 Analyze Bearer scan results\n10:06 Skip a rule while doing a bearer scan\n10:55 How to resolve bearer scan warnings\n11:48 Can we Autocorrect with bearer?\n13:50 Fix a bearer scan warning\n14:36 Can I build bearer into my CI?\n16:50 Generate privacy report CSV\n20:05 Bearer vs Brakeman\n21:10 Fork bearer and customize rules or add your own rules\n24:01 Run Bearer on Corsego repo\n26:04 Run Bearer on Insta2Blog repo\n29:49 When should I use bearer?\n32:48 Can bearer scan a Hanami or Sinatra app?\n33:31 Run bearer on my Jekyll blog\n34:04 Wrapping up"
  },
  {
    "id": "K1o1wtGzl6g",
    "title": "CertificateOwl day2 - building a proof-of-concept (POC) app with Ruby on Rails",
    "description": "In this series I will try to build a SaaS that will let organizations (universities, schools, test centers, event organizers) easily bulk-generate PDF certificates and email them to recepients.\n\nDeliverables in this session:\n1. Select certificate template\n2. Upload recepients list CSV\n3. Generate PDF & email certificates with QR\n\nEpisode source code: https://github.com/yshmarov/certificateowl/pull/1"
  },
  {
    "id": "moeJ_0WQZxo",
    "title": "Rails 7 #116 Custom error pages (404 Not found and 500 Internal server error)",
    "description": "Ruby on Rails #116 Custom error pages (404 Not found and 500 Internal server error)\n\nWhen you create a new rails app, error pages like 404 and 500 are automatically generated in the public folder.\nTo make your app look more professional, you might want to style these pages using the same CSS framework as all other parts of your app.\n\nEpisode source code: https://github.com/corsego/116-custom-error-pages/commit/b6bebd791bd3d84e6a7a6d04769d96335557ba79\nBased on this blogpost: https://blog.corsego.com/custom-error-pages\n\n0:00 You need to update the error pages for your app\n0:50 Add custom error pages \n5:42 Style your error pages with Tailwind\n8:43 Demo of the styled sexy error pages"
  },
  {
    "id": "C3fB8LzNst8",
    "title": "CertificateOwl day1 - product and market ressearch",
    "description": "In this series I will try to build a SaaS that will let organizations (universities, schools, test centers, event organizers) easily bulk-generate PDF certificates and email them to recepients.\n\nBefore writing any code, one must first do some reasearch."
  },
  {
    "id": "KMonLTvWR5g",
    "title": "Rails 7 #115 Multitenancy, Teams and Roles without a gem",
    "description": "Ruby on Rails #115 Multitenancy, Teams and Roles without a gem\n\nWant to learn more on the topic? \nHere's a DISCOUNT for my complete course \"Ruby on Rails: Learn to Build a Multitenancy SaaS app\": https://yshmarov.gumroad.com/l/ror6saas/presale33\n\nIn this episode we will:\n- let users register\n- let users create tenants/accounts/organizations/workspaces\n- user who created tenant automatically becomes admin\n- invite users to become members of the app\n- invited users are not admins\n- allow only members to access parts of the app scoped to the tenant\n\nSetting tenant based on routes is the best, because you can have multiple tenants open in different tabs (unlike adding current_tenant_id current_user).\nSecond best option is subdomain multitenancy, but that is harder to pull off and maintain.\nRow-based multitenancy is the most popular choice, and it is used in Rails SaaS starterkits like Bullettrain and Jumpstartpro.\n\nEpisode source code: https://github.com/corsego/116-multitenancy-routes-rows/commits/main\nDatabase architecture: https://dbdiagram.io/d/63fbe3ed296d97641d83db94\n\n0:00 Multitenancy examples\n4:35 static pages controller\n6:28 install devise\n8:48 scaffold tenants\n10:31 generate members resource\n12:34 tenant creator becomes admin member, member authorization\n16:12 install devise invitable\n17:31 diplay tenant members\n20:20 invite users to be members of tenant\n26:42 member authorization\n28:50 Final demo and thoughts"
  },
  {
    "id": "yYt-SlVt-yY",
    "title": "Reverse Engineering a Web App: Pipplet Language Testing Platform",
    "description": "🔍 Recently Pipplet app has come to my spotlight.\nIt is an online language testing platform, used by businesses to evaluate a candidates skills.\nAs a pleasant surprise, the platform does not offer multiple-choice questions.\nInstead, it has open-ended questions.\nThat way candidates are less likely to be able to cheat.\n\n👨‍💻 In this session I am planning to navigate their UI and map-out how I would reproduce their apps functionality.\n\nLink to the Database Diagram that I created: https://dbdiagram.io/d/63fa64e8296d97641d83b984\n\nText walkthrough with screenshots: https://blog.corsego.com/pipplet-clone\n\n⚠️ I am in no way affiliated with Pipplet. I do not endorse their platform either. This video is solely in educational purposes.\n\nThis is Episode 115.\n\nIn Episode 57 I did database modelling based on a Figma file. Check it out: https://www.youtube.com/watch?v=NZlN73NEgWM"
  },
  {
    "id": "ZXPGxUeQN_g",
    "title": "Rails 7 #114 Recently viewed products with Kredis",
    "description": "Recently viewed products is a very common feature in Ecommerce.\nShowing users a list of products they viewed is considered to increase conversion.\nThe least complex way of implementing this kind of list can be in Redis.\nGem Kredis allows us to associate a Redis attribute with an ActiveRecord model.\nWe will store and update the list of recently visited products in Redis and associate it with our Current user.\n\nEpisode source code: https://github.com/corsego/114-kredis-recently-viewed-products/commit/22cfd31ad68bbb67ebf3b5f57b976b2dff5f6d7a\nBlogpost - kredis recently visited pages: https://blog.corsego.com/kredis-recently-visited-pages\n\n0:00 Store \"recently visited\" in Redis vs Postgresql?\n1:58 Kredis unique list\n2:50 Add kredis attribute to User\n4:00 Update recently_viewed_products\n5:25 display users recently_viewed_products\n7:25 Works! We can now store and display a list of 5 most recently visited products by the user"
  },
  {
    "id": "hWzBy4eA8Ww",
    "title": "Rails 7 #113 Kredis Live counter, HTTP vs Websocket Turbo Broadcasts",
    "description": "In the two previous episodes we use Kredis to store website visitors and users online. Let's dive deeper into what Kredis is and other ways we can use it!\n\nRedis is now baked into Rails by default.\nKredis let's you easily save and retrieve data from Redis.\nKiller feature of Kredis - reference ActiveRecord objects with Redis attributes.\nFor example - sstore User \"preferences\" in Redis, not Postgresql.\nThere are a lot of usecases for Kredis, and in this video I explore just a few.\n\nIn THIS episode we will build a counter with a PLUS and MINUS button.\nWhen clicked, the two buttons will be able to increase or decrease the counter respectively.\nWe will also use Turbo Streams to update the counter without having to refresh the page.\nWe will compare HTTP turbo streams that send updates only in the window where the action happened, with turbo stream broadcasts, that send updates to ALL the clients that have a page open.\n\nEpisode source code: https://github.com/corsego/113-kredis-counter/commit/7819719780b7bd46770b8d1cafc156674fa85df2\nBlogpost - kredis overview: https://blog.corsego.com/gem-kredis-intro\n\n0:00 Redis in Rails 7\n1:09 install Kredis\n1:39 use Kredis from Rails console, Kredis list (array)\n2:30 Kredis unique list (array)\n3:26 Kredis counter (integer)\n3:54 display Kredis counter in Rails view\n5:58 button to increment counter\n7:16 button to decrement counter\n8:05 refresh counter with HTTP Turbo Streams\n11:20 push live counter updates with Turbo Stream Broadcasts that use ActionCable and Websockets\n13:30 Works! Counter gets updated in all browser windows!"
  },
  {
    "id": "-fWTYoVfTEA",
    "title": "Rails 7 #112 Devise finally works with Rails 7 and Turbo, but with a twist",
    "description": "As I recently mentioned, Devise has been finally patched to work with Rails 7 out of the box.\nBut when I tried installing it, I had a few minor issues:\n- remember to use MAIN branch of devise\n- re-generate the devise.rb initializer, or add these lines to it:\n```ruby\n  config.responder.error_status = :unprocessable_entity\n  config.responder.redirect_status = :see_other\n```\n\nEpisode source code with comments: https://github.com/corsego/112-rails-7-devise-patch/commit/4717a4a6e12bb292b5515e97ce980d0c17751af7#\nThe devise patch: https://github.com/heartcombo/devise/pull/5548\n\n0:00 Devise Drama queens\n01:00 Install Devise\n2:21 Check if Devise works (it doesn't)\n2:46 Make devise work (add config.responders)\n5:10 Link to sign out\n5:43 Summary"
  },
  {
    "id": "1Hfaq2vH2EQ",
    "title": "Rails 7 #111 Twilio SMS API",
    "description": "Twilio makes it super easy to send SMS from your Ruby app.\n\nIn this episode we will:\n- get Twilio API credentials\n- get a Twilio phone number from which we will send SMS\n- verify a test phone number for receiving SMS in development\n- write an SmsService that we can call from anywhere in our app\n- ensure that when using the SmsService we don't send SMS to a real phone number\n- explore the Twilio SMS Dashboard\n\nEpisode source code: https://github.com/corsego/111-twilio-sms-api/commit/5cecefabfc2228207989677c1dd5b54b21cf9218\nBased on this blogpost: https://blog.corsego.com/rails-twilio-sms-api\n\nDon't worry, I've updated my twilio credentials. Don't forget to never expose yours!\n\n0:00 Do you need SMS in 2023?\n1:02 Install Twilio Ruby in a Rails app\n2:52 Get Twilio API keys, phone number and whitelist countries\n5:50 Try sending an SMS\n6:22 Make Twilio SmsService generic\n8:50 Send generic SMS message\n9:53 Summary of code changes\n11:09 Explore Twilio dashboard"
  },
  {
    "id": "rK7kyXgV8o8",
    "title": "Rails 7 #110 Realtime Online User Tracking with Actioncable, Kredis, Turbo Broadcasts",
    "description": "This episode was inspired by the great work of other creators. Hopefully my input tackles some flaws that would appear in a production environment,  demistifies some code and potential challanges.\n\nZero lines of javascript.\nDon't store view login in models.\nDon't hit the relational database on every web action.\n\nDo you think this can be improved even more? Let me know what you think 🙏.\n\nEpisode source code: https://github.com/corsego/110-live-users-count/commit/238ab48dd8871b20c30387fd1c64d362992560d8\nBased on this blogpost: https://blog.corsego.com/action-cable-broadcast-users-online\nTimestamps approach to see users online: https://blog.corsego.com/set-user-status-online\n\n0:00 Other approaches to tracking users online\n2:41 Demo of the final application\n4:22 Track online users with Kredis, Hotwire Turbo Stream Broadcasts and Action Cable\n21:15 Not logged in users can see users online \n23:32 Summary"
  },
  {
    "id": "hXQVltAu1oY",
    "title": "Rails 7 E109 Live vistor count. ActionCable, Turbo Broadcasts, Kredis",
    "description": "Let's add \"Live count for total website visitors\" and \"Live count for visitors inside a room\".\n\nImportantly, we will not deal with user REGISTRATION to identify a visitor. One browser session = one unique visitor with a session_id.\n\nWe will use \"turbo_stream_from\" to plug into an ActionCable Channel and track websocket subscriptions and un-subscriptions.\nWhenever a user \"subscribes\", we will add his browser session_id to a Kredis array.\nWe will Broadcast the updated Kredis array COUNT to everybody subscribed to the channel.\n\nSounds quite complex, but I still think of it as a very low-code solution.\n\nText walkthrough: https://blog.corsego.com/action-cable-broadcast-users-online\nEpisode source code with comments: https://github.com/corsego/109-live-visitor-count-action-cable-kredis-turbo/commit/645c08eb981edaaad919f070e300a2ad24d28b08\n\n0:00 Demo - Track visitors on a website and in a room\n1:51 Track all website visitors with Kredis and ActionCable\n12:25 Update live vistiors count with Turbo Stream Broadcasts\n14:29 Track visitors in a Room\n20:40 Summary and final demo"
  },
  {
    "id": "cAEzzpvm43Y",
    "title": "Ruby on Rails #108 How to use the Browser Geolocation API with Rails",
    "description": "Another geolocation episode!\nIn previous episodes we learnt to get COORDINATES based on address, and place coordinates on a map.\nNow, we will learn to get a users' accurate geolocation based on browser Geolocation API. It is supported by any browser!\nWe will integrate Geolocation into a Rails app with StimulusJS.\n\nWarning! Asking for access to the location on page load will result in most of your users rejecting access.\n\nBlogpost for this video: https://blog.corsego.com/stimulus-get-browser-location\nEpisode source code: https://github.com/corsego/108-geolocation-api/commit/9aed77ce811492a16e8c78d1dccb74106c531b2b\n\nP.S. what do you think about my new setup 🌜? That's actually the reason I did the few previous episodes without showing face 🌝\n\n0:00 Geocoding and maps recap\n0:35 Example search by current location\n1:08 Browser Geolocation API\n1:40 Stimulus Geolocation Controller\n4:04 Button to get location\n5:10 Search near me (use browser coordinates in query)\n6:40 Works! DEMO\n7:18 Geolocation accuracy problems?!"
  },
  {
    "id": "FEj0cJqgcRs",
    "title": "Ruby on Rails #107 How to display locations on a map with Mapbox API and gem Mapkick like AirBnB",
    "description": "In the previous episode we learnt to use gem Geocoder to calculate COORDINATES (latitude, longitude) based on address.\nIn this episode, we will display multiple coordinates on a map. Together with Geocoder search, this will empower us to create interactive maps like AirBnB does!\nWe will also make the links to the locations CLICKABLE!\n\nText description: https://blog.corsego.com/gem-mapkick-rb\nEpisode source code: https://github.com/corsego/107-gem-mapkick/commit/58295c740ec2a0bb96717a31095d93463c15fe03\nGem mapkick: https://github.com/ankane/mapkick\n\n0:00 Previous work with Geocoding\n0:54 Airbnb example\n1:46 Install Mapkick-RB\n2:45 MAPBOX_ACCESS_TOKEN\n3:45 display a map with different options\n7:23 separate map for each location\n8:27 clickable links to locations\n10:55 display all locations on ONE map\n11:45 customize JSON data\n13:41 force JSON data to respond to search params"
  },
  {
    "id": "oeeqEA_mdJs",
    "title": "Ruby on Rails #106 How to use gem Geocoder, GPS coordinates, distance calculation, map markers",
    "description": "In this episode we will use gem Geocoder to:\n- find for GPS coordinates (latitude and longitude) based on an address;\n- calculate distances in miles and kilometers;\n- search for locations within range (near);\n- search for locations within location (nearbys);\n- use Mapbox API to display a static map\n\nEpisode source code: https://github.com/corsego/106-gem-geocoder/commit/ca4485399e9b7d12e1ffde807eec3970eb314068\nText walkthrough: https://blog.corsego.com/gem-geocoder-ruby\nMapbox API: https://docs.mapbox.com/playground/static/\n\n0:00 latitude and longitude coordinates\n01:00 geocoder search, calculations\n3:25 scaffold Location, seeds\n4:40 Geocode existing addresses\n6:30 Search Locations NEAR (console)\n7:35 Search Locations NEAR (form, controller)\n9:35 Configure search NEAR distance\n10:31 Search NEARBYS (locations close to current location)\n11:55 Distance between locations\n12:43 use KILOMETERS, not MILES\n14:00 Mapbox Static Maps\n17:10 Works! DEMO\n17:31 re-geocode if address changed\n20:01 Summary"
  },
  {
    "id": "55qBySBH_8k",
    "title": "Ruby on Rails #105 parse JSON and YAML",
    "description": "JSON and YAML are great ways of storing data structures.\nYou can parse a JSON/YAML file directly with Ruby, or within a Rails application.\nYou can also WRITE to the file!\n\nPopular usecases:\n- parse file and create seed data\n- display parsed default data directly in a view (for example FAQ section)\n\nEpisode source code:\nhttps://github.com/corsego/105-parse-yaml-json/commit/90282b5468fbfe78bcbb1df29ef91de5eaa160a2\n\nParse JSON with Ruby on Rails: https://blog.corsego.com/parse-json-with-ruby-on-rails\nParse YAML with Ruby on Rails: https://blog.corsego.com/parse-yaml-yml-with-ruby-on-rails\n\n0:00 incoming JSON and YAML data\n0:50 parse YAML with Ruby (no Rails)\n2:01 update and save YAML file\n3:01 parse JSON with Ruby (no Rails)\n3:50 display YAML in Rails controller\n6:05 display JSON in Rails controller\n6:37 seed database data from datafile"
  },
  {
    "id": "T8C0GOqW9UU",
    "title": "Ruby on Rails #104 Remote Calendar Subscription with WEBCAL",
    "description": "WEBCAL protocol allows a user to \"subscribe\" to a calendar with many events in your app.\n\nThe users calendar app will “ping” your calendar endpoint from time to time to get the updated events list.\n\nDon't forget that the route to the calendar subscription path should not require authorization!\n\nEpisode source code: https://github.com/corsego/104-webcal-icalendar/commit/093302163c824ecd5aa42d9350c8f4c5543c567d\nText walkthrough: https://blog.corsego.com/icalendar-ruby\n\n0:00 What are calendar subscriptions?\n1:00 Webcal subscription demo\n2:04 Create link to subscribe to calendar\n5:16 It works!\n6:00 Warnings and Summary"
  },
  {
    "id": "9bOzMgkULXs",
    "title": "Ruby on Rails #103 Simple Omniauth without Devise",
    "description": "Previously I’ve covered \"Github omniauth with Devise\".\nAn even simpler solution would be to sign in via a social login provider (Github) without Devise at all! \nHere’s the easiest way to create your whole social authentication solution from zero!\n\nEpisode source code: https://github.com/corsego/103-simple-omniauth/commit/f52fd98c7fb6dc3ea61f7b2608d07dfe40ea4130\nText version: https://blog.corsego.com/omniauth-without-devise\n\nPR adding this feature to an app, together with tests: https://github.com/yshmarov/superails/pull/5/files\n\n0:00 the problem\n0:45 github omniauth\n3:50 respond to auth callback\n6:30 User model\n8:39 Store User in session\n10:10 Set current_user\n11:46 Logout\n12:50 user_signed_in?\n14:50 require_authentication\n16:20 Summary"
  },
  {
    "id": "UhtKk6w1fwU",
    "title": "Ruby on Rails #102 Email Calendar Invite",
    "description": "In the PREVIOUS episode we generated .ICS files, that can be downloaded and added to your calendar.\nIn THIS episode we will EMAIL calendar invites and automatically add them to a users calendar!\nWe will also handle updating/cancelling events!\n\nEpisode source code: https://github.com/corsego/101-icalendar/commit/a76266bf86d78367984c5d6938c8425fd14d3241\nText description: https://blog.corsego.com/icalendar-ruby\n\n0:00 Introduction\n1:10 generate Mailer\n2:04 attach calendar invite\n3:02 button to send email\n6:15 deliver emails\n7:50 add organiser\n9:50 RSVP (yes-maybe-no)\n10:39 add attendee\n12:10 UID has to really be unique\n12:50 automatically RSVP Yes\n13:40 update event details\n14:20 cancel event"
  },
  {
    "id": "CVt5LQfi8Dk",
    "title": "Ruby on Rails #101 iCalendar and .ics format. Add events to calendar",
    "description": "Learn to create valid calendar events, that a user can download as an .ics file and add to his calendar!\n\nResources:\n- text version of this video: https://blog.corsego.com/icalendar-ruby\n- source code: https://github.com/corsego/101-icalendar/commit/9ff3a2aa99d32ab5a51e9b6ed158553f37b49dde\n- gem icalendar: https://github.com/icalendar/icalendar\n- icalendar documentation: https://www.rfc-editor.org/rfc/rfc5545\n\n0:00 ics format\n2:05 Boilerplate app\n2:40 gem icalendar\n5:50 download ics file\n8:24 add location field\n10:05 remove duplicates in calendar (uid, sequence) \n12:07 include urls\n13:55 change ics filename\n15:16 summary\n15:35 refactoring\n19:10 final demo"
  },
  {
    "id": "CmNj_BZGGUg",
    "title": "Ruby on Rails #100 Browser tab title notifications",
    "description": "Do you like see the \"new notifications count\" in the LinkedIn browser tab?\nIn this episode we will update the browser tab title, if the application user has new unsee notifications.\nWe will use StimulusJS to add a blinking effect.\nWe will use Turbo Stream Broadcasts to update the notifications count in all browser tabs.\nWe will also add an \"undead\" symbol to the application thumbnail.\n\nIn the context of StimulusJS, we will leverage setInterval and usage of disconnect().\n\nImprovements you can do yourself:\n- Scope notifications per user\n- Mark notifications as \"seen\" when accessing \"notifications#show\" page/controller\n- Broadcast notifications count when notification is deleted or seen\n\nEpisode source code: https://github.com/corsego/100-browser-tab-notifications/commit/bc5b318dfa8986b36f50fbd1dda1be6c5c4e1069\n\nText version: https://blog.corsego.com/browser-tab-title-notifications\n\n0:00 Feature request\n0:19 What we will build\n1:02 Initial setup\n1:35 conditional thumbnails\n4:20 conditional notifications count\n5:05 StimulusJS - blinking page title\n10:40 Broadcast update thumbnail (no page refresh)\n15:52 Summary"
  },
  {
    "id": "A9q6YwhLCyI",
    "title": "Ruby on Rails #99 Hotwire: Search and Infinite Pagination (Ransack with Pagy)",
    "description": "Implementing search or pagination is relatively easy, but it can get tricky when you try to combine the two, especially when you factor in some frontend. In this eposide we will learn to use gem Ransack for search, and gem Pagy for infinite scroll pagination.\n\nEpisode source code: https://github.com/corsego/99-ransack-pagy-search-infinite-scroll/commit/ab6b64bb3f233d3deac9b7ed4a6532eb30d610bc\n\nText version: https://blog.corsego.com/hotwire-search-infinite-pagination\n\n0:00 Final app demo with search and pagination\n0:55 Boilerplate app\n1:20 Ransack search\n3:40 Search without page refresh\n4:50 Remove submit button\n5:40 Pagination with pagy\n7:25 Infinite pagination\n10:40 Stop endless pagination loop\n11:35 Fix search\n13:40 Query security\n16:00 Highlight search results\n17:05 Summary"
  },
  {
    "id": "bkFoYOMSlCU",
    "title": "Ruby on Rails #98 Inline editing attributes with Hotwire",
    "description": "Allow user to easily edit an attribute by just clicking on it!\nThis way you can have fewer full-page redirects; don't have to always render a full edit form.\n5 years ago I would have used gem best_in_place for this, but now it can be easily achieved with turbo_frames!\n\nEpisode source code: https://github.com/corsego/98-hotwire-inline-edit-attributes/commit/1e6154863cff969bec5266add752a9d591f5a1a4\n\nText version: https://blog.corsego.com/hotwire-inline-edit-attributes\n\n0:00 Inline editing problem\n1:20 Edit single attribute inline\n5:15 Edit any attribute individually\n10:00 Link to edit empty value\n10:35 Validations\n11:40 Save by clicking outside\n13:00 Optionally render whole edit form"
  },
  {
    "id": "00xl7yP7Yvs",
    "title": "Ruby on Rails #97 PASSWORDLESS login with MAGIC LINK",
    "description": "Passwordless authentication via magic link is an interesting alternative to email-password authentication solutions like Devise.\n\nA passwordless authentication flow looks like this:\n\n1. Enter your email address\n2. Receive login link in an email\n3. Click link = You are logged in!\n\nI’ve implemented passwordless authentication in insta2blog.com, and for now I am super happy with the solution 🚀. Feel free to try it out!\n\nIn a way this is a more secure authenication strategy, because there is no compromised password point of failure. It is as secure as your email account.\n\nHowever to even start using this solution in production, you will need to set up sending emails in production.\n\nIt is not hard to create this kind of authentication solution on your own, however I prefer not to reinvent the wheel. Gem passwordless neatly solves the problem.\n\nEpisode source code: https://github.com/corsego/97-passwordless-auth/commit/34517fddf74572308780c1593ef23c0c85872301\nText version: https://blog.corsego.com/gem-passwordless-magic-link-auth\n\n0:00 Demo how magic link login works\n1:29 install gem Passwordless\n7:05 sign in flow, find or create user\n9:13 missing host to link to\n11:30 click on link to sign in, link to sign in and sign out\n13:50 fix Turbo errors\n16:11 customize magic link Email\n17:11 gem letter_opener to preview emails\n18:27 authorization - only logged in users can edit posts\n19:47 Summary"
  },
  {
    "id": "TJhvbAI0P8k",
    "title": "Ruby on Rails #96 Deploy to Digital Ocean App Platform",
    "description": "In this episode we will deploy a Rails 7 app that uses Postgresql and Redis to Digital Ocean App platform - an \"easy deploy & manage\" solution. We will also connect a custom domain and set up log forwarding.\n\nText description: https://blog.corsego.com/deploy-to-digitalocean-apps-platform\nApp that I deployed (restaurant ordering app): https://github.com/yshmarov/qr-menu-app"
  },
  {
    "id": "M3b5n46Kd_I",
    "title": "Ruby on Rails #95 parse text and convert hashtags and mentions into links",
    "description": "Parse text to find hashtags and mentions and turn them into searchable links. This is a CORE feature when building a social texting app!\n\nEpisode source code: https://github.com/corsego/95-hashtags-mentions/commit/d71f12ff792572c0ef7127a302115cb16c428487\nBlogpost: https://blog.corsego.com/search-by-hashtags-or-mentions\n\nInsta2Blog: https://www.insta2blog.com/"
  },
  {
    "id": "F0au2jk7Skw",
    "title": "Ruby on Rails #94 Rails 7 Select Box with Search using Slim-Select",
    "description": "I was planning to create a short episode on enabling slim-select, but it ended up having a big boilerplate for adding \"select\" and \"multiselect\". If you don't need the boilerplate, feel free to skip to 9:25.\n\nThe boilerplat app uses Importmaps for JS and Tailwind for CSS.\n\nI like slim-select because it uses vanilla javascript and does not rely on jQuery. If you don't like slim-select, the second best alternative is tom-select.\n\nEpisode source code: https://github.com/corsego/94-slim-select/commit/13daec3b195cbc126adf6588e96b2850b0d883c4\nText version: https://blog.corsego.com/stimulus-slim-select"
  },
  {
    "id": "RHn1UzwLqMw",
    "title": "Ruby on Rails #93 Slack API - send transactional messages from your app to Slack",
    "description": "Configure Slack Bot permissions and get an API token.\nSend transactional messages from your app to Slack.\n\nEpisode source code:\nhttps://github.com/corsego/93-slack-api/commit/deec85cc1e9940dbcec4f6a03da42e34fce5458d\nGem slack-ruby-client:\nhttps://github.com/slack-ruby/slack-ruby-client\nText version of this video:\nhttps://blog.corsego.com/slack-api-with-rails\nSlack API:\nhttps://api.slack.com"
  },
  {
    "id": "uTLKlgUVD1I",
    "title": "Ruby on Rails #92 Github Actions CI (run Tests, Rubocop, Erblint)",
    "description": "⚡️ Here's how you can set up **Github Actions** on a new Ruby on Rails project with:\n✅ Postgres\n✅ Redis\n✅ Minitest\n✅ System tests\n✅ Rubocop\n✅ Erblint\n\nGit repo:\nhttps://github.com/corsego/92-github-actions-ci/pull/2\nRails tests CI script:\nhttps://blog.corsego.com/github-actions\nInstall Rubocop, CI script:\nhttps://blog.corsego.com/install-and-use-rubocop\nInstall erblint:\nhttps://blog.corsego.com/erb-linting"
  },
  {
    "id": "dVbDkWbHX6M",
    "title": "Ruby on Rails #91 Rmagick with Rails ActiveStorage",
    "description": "In the previous episode we used Rmagick to generate images with pure Ruby.\nNow we will learn to generate images based on ActiveRecord objects and store them in ActiveStorage.\n\nText version: https://blog.corsego.com/rmagick-activestorage\nEpisode source code: https://github.com/corsego/91-rmagick-activestorage-activerecord/commit/091b7f93736e3eacf9631d975d962d56d7107ecf"
  },
  {
    "id": "nM3CE1AiIFU",
    "title": "Ruby on Rails #90 How to use Rmagick to autogenerate images",
    "description": "ImageMagick is a library that allows you to do all kinds of image manipulations.\nRmagick is Ruby plugin for ImageMagick.\nIn this episode we will learn to read, resize, crop images; overlay images above images; overlay text above images.\n\nRmagick docs: https://github.com/rmagick/rmagick\nEpisode source code: https://github.com/corsego/90-rmagick-ruby\nBlogpost: https://blog.corsego.com/rmagick-activestorage"
  },
  {
    "id": "H3HSIaA9exU",
    "title": "Live talk: Hotwire, ViewComponent, StimulusJS in production (my experience )",
    "description": "On August 25 I gave (my first ever) live talk in Warsaw, Poland.\n\nI described my experience developing Rails monolyth apps using Hotwire, ViewComponent, StimulusJS, that I've been doing for over a year now.\n\nI think I've found a lot of great patterns that can be re-applied.\n\nI think the biggest challenge is discovering \"what is the limit of X technology? how far can I push it?\"\n\nAfterwards, we had BBQ and drinks at @Visualitypl together with @Arkency"
  },
  {
    "id": "E_8BBAvVCqw",
    "title": "Ruby on Rails #89 export to CSV (different approaches)",
    "description": "Explore different ways of exporting data from a Ruby on Rails database to CSV.\n\nFirst we will create flexible custom templates for generating CSV data in a specific way we want to display it.\n\nNext, will create a generator that downloads a whole database table as CSV.\n\nEach approach is good, depending on your specific situation.\n\nEpisode source code: https://github.com/corsego/89-csv-export/commit/608fa8f9a9960f14b5c7619c8ccfb3a95b94da35\nText version: https://blog.corsego.com/export-csv-from-rails-database"
  },
  {
    "id": "EJ8FZMLsVVQ",
    "title": "Ruby on Rails #88 Import CSV and parse it within a Rails app",
    "description": "In this episode we will import a custom CSV into a Rails app.\nWe will also map columns from the CSV, so that they fit our database.\nTo conclude, we will extract the business logic from the Controller to a Service.\n\nEpisode Source Code: https://github.com/corsego/88-csv-import/commit/6a6a43687ca5c967e32f3f1772d70f4d480a51ea\n\nText version: https://blog.corsego.com/import-csv-to-rails-database\n\nRuby CSV class: https://ruby-doc.org/stdlib-2.6.1/libdoc/csv/rdoc/CSV.html"
  },
  {
    "id": "Li4ag6xNKdk",
    "title": "Ruby on Rails #87 StimulusJS select all checkboxes",
    "description": "Episode Source Code: https://github.com/corsego/87-stimulus-select-all/commit/cab81cc09d1dc9052eb776b15b2fe5b619359f9a\nText version: https://blog.corsego.com/stimulus-checkboxes-select-all"
  },
  {
    "id": "lFjOXvJC2nA",
    "title": "Ruby on Rails #86 Bulk Actions, Edit Multiple Selected Records",
    "description": "Episode Source Code: https://github.com/corsego/86-edit-multiple/commit/93be87e9b0a65b0afdd1ccd1782d7458e481c9ad\nText version: https://blog.corsego.com/checkbox-mass-update-records"
  },
  {
    "id": "N7HZ-4zGNe4",
    "title": "Ruby on Rails #85 HTTP Authentication in Production",
    "description": "Sometimes the most simple authorization solution is just enough. HTTP Basic Authorization is built into every browser. Here's how you can use it with Rails\n\nEpisode Source Code: https://github.com/corsego/85-http-authorization/commits/main\nText description: https://blog.corsego.com/http-basic-authentication"
  },
  {
    "id": "Udkil4287pM",
    "title": "Ruby on Rails #84 Cookies Consent Banner",
    "description": "Here's the easiest way to add an \"Accept Cookies\" pop-up banner modal and save preferences in a Rails monolyth app using Hotwire Turbo Frames.\nNo 3rd party providers required!\n\nEpisode Source Code: https://github.com/corsego/84-cookies-gdpr-banner/commit/88390dff756021b70e2da3b9a5961da377921081"
  },
  {
    "id": "HEDBhzlrhF8",
    "title": "Ruby on Rails #83 import and use SVG in Rails. gem inline_svg",
    "description": "Sometimes instead of depending on an external SVG library you will want to import your own SVGs into a Rails app. In this episode we will look at different approaches and problems while importing and styling SVGs in a Rails app.\n\nI recommend using the gem \"inline_svg\" that offers a well-maintained and tested \"inline_svg_tag\" that will let you apply any HTML attributes to your SVG.\n\nAlso consider that you might sometimes have to update the source code of an imported SVG, so that it can be transformed using classes and styles withing your app.\n\n0:00 The problem\n0:45 Import SVG from Figma & Fontawesome\n2:27 image_tag (render SVG as IMG)\n4:00 Try styling SVG\n5:03 SVG fill currentColor\n6:00 svg_tag (render SVG as SVG not IMG)\n8:00 Fix SVG size scaling\n9:20 Fix Fontawesome size scaling\n10:21 Use gem inline_svg\n\nEpisode source code: https://github.com/corsego/83-rails-svg/commit/c96ca0ae88d989abc5579def927cecb39e2201e1\nBlogpost: https://blog.corsego.com/gem-inline-svg\nGem inline_svg: https://github.com/jamesmartin/inline_svg"
  },
  {
    "id": "vKjWXMHzOoA",
    "title": "Ruby on Rails #82 Chained Select Fields in a form. Gem City-State",
    "description": "Episode source code: https://github.com/corsego/82-gem-city-state-dynamic/commit/6b0738c9b5338fa19f1d93406e2deafbbebb1d72\n\nGem city-state:\nhttps://github.com/loureirorg/city-state\n\n0:00 Intro\n1:00 Scaffold Addresses\n1:41 Gem City-State\n5:25 Basic validations\n6:09 Advanced validations\n12:00 Humanize labels\n13:45 Form validation button \n15:38 Stimulus autosubmit\n18:32 Turbo Frame\n20:40 Stimulus reset form\n22:17 Summary"
  },
  {
    "id": "Ku_SVWl_u64",
    "title": "Ruby on Rails #81 StimulusJS: Conditionally display form fields based on selected value",
    "description": "Episode Source Code: https://github.com/corsego/81-stimulus-conditional-fields/commit/2aa716d1d9d233487209153d3c006bc76ef5f5e1\n\nBlogpost: https://blog.corsego.com/stimulus-display-show-hide-div-based-on-value\n\n0:00 Intro\n1:36 Create Stimulus controller\n7:05 Final result"
  },
  {
    "id": "Oy4FVZ0CmZs",
    "title": "Ruby on Rails #80 Dynamic Forms with Turbo (not JS approach)",
    "description": "Learn how to add fields to a form dynamically based on your selection in previous fields\n\nEpisode Source Code: https://github.com/corsego/80-turbo-dynamic-forms/commit/7d416aa68aeb49a360aaded21517dcf3e4ae72e3\n\n0:00 Intro\n1:05 Scaffold Posts\n2:05 Conditional Validations. Enum\n4:25 Conditionally Display Passcode field\n5:51 Custom Form Button\n9:07 Stimulus clicker\n13:28 Turbo Frame\n15:03 Turbo Stream inside Frame\n16:52 Summary"
  },
  {
    "id": "dqwg0sdQHZ4",
    "title": "Ruby on Rails #79 Classless CSS frameworks",
    "description": "Episode source code:\nhttps://github.com/corsego/79-classless-css-frameworks/commit/c569484b89ae6f41a13ec64c1c4326059897a3c5\n\nText description:\nhttps://blog.corsego.com/classless-css-frameworks\n\nSimple CSS Framework: \nhttps://simplecss.org\n\nMVP CSS Framework:\nhttps://andybrewer.github.io/mvp/"
  },
  {
    "id": "_7Hk8EPpr-U",
    "title": "Ruby on Rails #78 Semantic HTML in Rails",
    "description": "Episode Source Code: https://github.com/corsego/78-semantic-html/commit/3a85f3f6b59e9799b372ab03306de76d4d2b05b7\n\nBlogpost about Semantic HTML in Ruby on Rails: https://blog.corsego.com/semantic-html-in-rails"
  },
  {
    "id": "j1QrkqX5DXQ",
    "title": "Ruby on Rails #77 HACKERMAN: strong params authorization",
    "description": "Even if some parameters are not visible or editable in the HTML, it does not mean a user won't be able to change them. This way a user can potentially do malicious actions in your app. Make sure that only expected attributes are editable, using strong params!\n\nEpisode source code: https://github.com/corsego/77-strong-params-authorization/commit/4609d17e23b5b5f244e554d91b32e68d852b6ae8\n\nText version: https://blog.corsego.com/permit-params-by-current-user-roles\n\nRails Docs: https://api.rubyonrails.org/classes/ActionController/StrongParameters.html"
  },
  {
    "id": "c-EbQDB0RsQ",
    "title": "Ruby on Rails #76 Fontawesome with Importmaps in Rails 7",
    "description": "Episode source code: https://github.com/corsego/76-fontawesome-rails7-importmaps/commit/669b9a5b1a0a064d55c1d5ec6b5fa95e450fd005\n\nText guide: https://blog.corsego.com/fontawesome-importmaps-rails7"
  },
  {
    "id": "o26zl4jskWU",
    "title": "Ruby on Rails #75 ActsAsVotable: likes, bookmarks, hotwire, vote scopes, cached votes",
    "description": "Complete guide to ActsAsVotable\n\nEpisode source code: https://github.com/corsego/75-acts-as-votable-revised/commit/9b315211f4f5d53b2453b0a0296a1c551d3c3c2b\nSome code clean up after all the hard work: https://github.com/corsego/75-acts-as-votable-revised/commit/4f5feac95557393dcbb435da4b157e4f7b7e5ee5\nGem ActsAsVotable: https://github.com/ryanto/acts_as_votable"
  },
  {
    "id": "XJ27X06GVrI",
    "title": "Ruby on Rails #74 Make Devise work with Rails 7 and Turbo",
    "description": "The simplest way to make Devise work well with Rails 7 and Turbo without writing and overwhelming code.\nWe will treat it as an HTML problem.\nAll you need to do is disable turbo explicitly in the devise views. \nJust add \"data: { turbo: false }\". That's it.\n\nText description: https://blog.corsego.com/turbo-devise\n\nEpisode source code: https://github.com/corsego/74-rails7-devise\n\nI've also updated the Devise Wiki: https://github.com/heartcombo/devise/wiki/Troubleshooting-Rails-7-and-Turbo-Drive\n\nGem devise: https://github.com/heartcombo/devise#getting-started\n\n* Add static_pages controller: https://github.com/corsego/74-rails7-devise/commit/e76228b26360d32bb554ca4e7a64d4b9a611028c\n* Basic devise installation: https://github.com/corsego/74-rails7-devise/commit/ee0d4cd4b94ba9f290dcc9c78346944d03702739\n*  rails generate devise:views https://github.com/corsego/74-rails7-devise/commit/d0d8ae12c8d5a1d775852eeace2c767249afdb00\n* MAKE IT WORK: https://github.com/corsego/74-rails7-devise/commit/f5d5656cb5b699ed55a6d8ba72fab67fcf10e23d"
  },
  {
    "id": "_T6uOL9L7NM",
    "title": "Ruby on Rails #73 Hovercards with Hotwire Turbo Frames",
    "description": "Learn to build lazy-loading github-styled hovercards(tooltips) with Hotwire Turbo Frames. Great example of using lazy-loading feature of turbo_frames.\n\nBlogpost: https://blog.corsego.com/hotwire-hovercards\n\nEpisode source code: https://github.com/corsego/73-turbo-frame-hovercards/commit/99e270c9aee903c69dc37d946eddb3accb4eb188\n\n0:00 Final app demo\n1:35 HTML details tag\n4:00 Load on open dropdown\n9:03 My cat!\n9:15 Load on hover\n12:30 Customize CSS\n13:15 Make links work"
  },
  {
    "id": "CqlVuoYIgEg",
    "title": "Ruby on Rails #72 gem Rouge for code highlighting in Markdown",
    "description": "If you are using Redcarpet, you will definitely want to also add Rouge!\n\nText version: https://blog.corsego.com/markdown-styling-with-rouge\n\nEpisode Source Code: https://github.com/corsego/72-gem-rouge/commit/6c2b27eaf3cc951b32ae6099602544c724446a9a\n\nGem Rouge: https://github.com/rouge-ruby/rouge\n\n0:00 Intro\n1:13 Install Gem Rouge\n4:25 Rouge CSS Themes\n6:16 WORKS. WHY?\n6:48 Customize CSS Theme"
  },
  {
    "id": "4tTRbJLeua8",
    "title": "Ruby on Rails #71 Gem Redcarpet to Parse Markdown text to HTML",
    "description": "Text version: https://blog.corsego.com/markdown\n\nEpisode Source Code: https://github.com/corsego/71-gem-redcarpet/commit/5a45b34b3c56e459d68aa45e196b1d974b5dc0ce\n\nGem Redcarpet: https://github.com/vmg/redcarpet\n\nFaker Markdown: https://github.com/faker-ruby/faker/blob/master/doc/default/markdown.md\n\n0:00 What is Redcarpet?\n1:40 Add fake markdown text\n2:58 simple_format\n3:30 Install gem Redcarpet\n5:07 Redcarpet Extensions\n7:48 Improve the input form\n8:20 Style code blocks\n10:05 Redcarpet Renderers\n14:41 Outro"
  },
  {
    "id": "9zJ-r3Rsx7Q",
    "title": "Ruby on Rails #70: Hotwire: Live form validations and previews",
    "description": "Get live character counter, validations, content preview while you fill in a form using Hotwire\n\nArticle: \"Live form validations and error rendering. Live markdown preview\": https://blog.corsego.com/live-form-validation-errors-markdown-preview\n\nEpisode source code: https://github.com/corsego/70-live-form-previews/commit/2c7747af6b5326f56035efd565e0705be0febb05\n\n0:00 Solution walkthrough\n1:46 Scaffold Tasks\n2:30 Validate Tasks\n3:16 Add second submit button\n6:58 Previewable Object\n9:45 No page redirect. TurboStreams\n12:50 Stimulus Autosubmit\n16:47 Debounce"
  },
  {
    "id": "sQBRkduaezo",
    "title": "Ruby on Rails #69 Frames + Streams: Infinite Scroll Pagination (Best approach)",
    "description": "In the last 2 episodes we implemented Infinite Scroll Pagination with Frames and Streams separately.\n\nIn this episode we will combine Frames + Streams to create an event simpler way to add Infinite Scroll to a Rails 7 app with Hotwire.\n\nEpisode source code: https://github.com/corsego/69-infinite-pagination-revised/commit/3018c50d1049cc3f9e8bc5bcf2fb1a84609ea7e1\n\nPagy Countless: https://ddnexus.github.io/pagy/extras/countless.html#gsc.tab=0\n\nThanks to https://github.com/secretpray/ for showing me this solution!\n\n0:00 Previous approaches\n0:50 Scaffold and seed Artists\n1:25 Paginate Artists\n2:05 Turbo Frame responds to Turbo Stream\n5:15 WORKS!\n5:30 Stop scrolling if no more pages\n6:32 Summary\n7:02 Pagy Countless"
  },
  {
    "id": "OEuNR3XGvPk",
    "title": "Ruby on Rails #68 Frames: Infinite Scroll Pagination",
    "description": "In this previous episode we added a button to \"Load more\" records at the bottom of the list, with the help of Hotwire Turbo Streams.\n\nEpisode Source Code: https://github.com/corsego/68-frames-infinite-pagination/commits/main\n\nIn the previous episode we automatically added more records to the bottom of the list while scrolling, with the help of Hotwire Turbo Frames.\n\n0:00 Turbo Stream pagination\n0:35 Turbo Frame pagination\n2:16 Scaffold and Seed Posts\n4:48 Basic Pagination\n6:12 Lazy Load Turbo Frame\n9:47 Display next page\n12:50 Keep displaying next pages\n14:30  Loading Placeholder\n15:22 Autoscroll? No.\n15:50 Summary"
  },
  {
    "id": "ScxUqW29F7E",
    "title": "Ruby on Rails #67 Streams: Infinite Scroll Pagination",
    "description": "In this episode we add a button to \"Load more\" records at the bottom of the list, with the help of Hotwire Turbo Streams.\n\nEpisode Source Code: https://github.com/corsego/67-streams-infinite-pagination/commits/main\n\nIn the NEXT episode we will automatically add more records to the bottom of the list while scrolling, with the help of Hotwire Turbo Frames."
  },
  {
    "id": "XgHXmZbyLvs",
    "title": "Ruby on Rails #66 StimulusJS: Targets, Values, Classes. Build a PRO dropdown",
    "description": "In this episode we will learn to leverage StimulusJS values, targets and classes to build advanced controllers like a PRO, while building a DROPDOWN component!\n\nSource code: https://github.com/corsego/66-stimulusjs-dropdown/commit/22e6ddf2167e21173daf724ff6aa6455dc29b739\nText version: https://blog.corsego.com/stimulus-dropdown\n\n0:00 Intro\n1:06 final app demo\n1:53 create stimulus controller\n33:34 Outro"
  },
  {
    "id": "mAANmoNgOKA",
    "title": "Ruby on Rails #65 Hotwire SPA: Flash Messages",
    "description": "The right way to render flash messages without page refresh, while mixing Turbo Streams and Stimulus JS. Automatically dismiss flash in 5 seconds.\n\nCreating a Single-Page-Application with Hotwire is quite easy!\n\nText guide: https://blog.corsego.com/turbo-hotwire-flash-messages\nSource code: https://github.com/corsego/65-hotwire-flash/commits/main\n\n0:00 FINAL APP DEMO\n0:59 Create app\n2:00 Scaffold Posts, Validations\n3:28 SimpleCSS\n4:15 Flash with page redirect\n5:54 Turbo Streams - Create Posts\n14:00 Flash without page redirect\n19:55 CSS for flash\n23:27 StimulusJS auto-remove Flash messages in 5 seconds\n25:50 FINAL APP DEMO 2\n26:16 Bonus: Render multiple Flash messages\n26:57 VERY FINAL APP DEMO"
  },
  {
    "id": "q-90GlLPBBI",
    "title": "Ruby on Rails #64 Cloud9 IDE - Rails 7, Github SSH, Heroku",
    "description": "Install Rails 7 on Cloud9: https://blog.corsego.com/install-ruby-on-rails-7-on-ubuntu\nGithub SSH: https://blog.corsego.com/aws-cloud9-github-ssh\n\nAWS Cloud9 usually costs me under $10/month. Totally worth it.\n\n0:00 Intro\n1:50 Create Environment\n3:40 Increase Disk Space\n5:28 Install Ruby on Rails 7\n9:30 Create Postgresql User\n10:20 Create Rails 7 app with Tailwind\n11:33 Run app on Cloud9\n13:10 Procfile.dev\n15:40 scaffold posts\n16:25 Tailwind\n18:20 Github SSH\n22:20 Heroku\n24:14 Outro"
  },
  {
    "id": "1QQ9j3z7NGw",
    "title": "Ruby on Rails #63 Hotwire Modals (the right way)",
    "description": "⛔DO NOT use a StimulusJS controller to render TurboStreams!⛔\n\nExtended text guide to this video: https://www.bearer.com/blog/how-to-build-modals-with-hotwire-turbo-frames-stimulusjs\n* Git repo: https://github.com/corsego/63-hotwire-modals/commits/main\n* TLDR: https://blog.corsego.com/hotwire-turbo-frame-modals\n\nP.S. Feel free to add CSS \"p-5 bg-slate-300 absolute z-10 top-10 right-10 rounded-md w-96 break-words\" to the modal, so that it shows nicely above page content.\n\n0:00 Intro\n0:49 App Demo\n2:12 Create New App\n3:20 Scaffold Posts\n4:44 Turbo Frame Modal\n7:40 Add validations...\n8:50 No matching turbo frame\n9:35 Turbo Stream - to add new post\n11:25 StimulusJS - dismiss modal\n17:30 Modal to EDIT a post\n20:20 Outro"
  },
  {
    "id": "nSx2RBt8l3g",
    "title": "Ruby on Rails #62 Live session: User Roles: Different approaches",
    "description": "A recording of a workshop I gave.\n\nDifferent approaches to setting user roles\n\nTopics covered:\n1. post.user_id\n2. admin:boolean\n3. roles:integer enum\n4. roles json hash\n5. rolify\n6. rolify - resourcify Posts\n\nGit repo: https://github.com/corsego/62-workshop-user-roles\n\nResources:\n* roles json hash: https://blog.corsego.com/user-roles-one-field\n* rolify 1: https://blog.corsego.com/rolify-edit-roles\n* rolify 2: https://blog.corsego.com/rolify-scopes"
  },
  {
    "id": "K4A8iapBjIM",
    "title": "Ruby on Rails #61 Live session: Gem Devise: ALL THE PLUGINS",
    "description": "A recording of a workshop I gave.\n\nEverything about User Authentication with all Devise features in 64 minutes!\n\nLearn to Install & Use Devise Trackable, Confirmable, Lockable, Timeoutable, Omniauthable, Invitable\n\nCaution: The sample app does not use Hotwired/Turbo, therefore does not have any devise-turbo issues.\n\nGit repo: https://github.com/corsego/61-workshop-complete-devise"
  },
  {
    "id": "PfCU0Nni8fI",
    "title": "Ruby on Rails #60 Hotwire Turbo Streams Autocomplete Search",
    "description": "Source code: https://github.com/corsego/60-turbo-autocomplete-search\n\nText guide: https://blog.corsego.com/hotwire-turbo-streams-autocomplete-search"
  },
  {
    "id": "csvaYIaBYpw",
    "title": "Ruby on Rails #59 Hotwire Turbo Streams CRUD",
    "description": "Just Enough Hotwire for Rails Developers with Yaroslav Shmarov | Open Source Every Day\n\nTEXT VERSION: https://blog.corsego.com/turbo-hotwire-CRUD\nGIT REPO: https://github.com/corsego/59-turbo-streams-crud/\n\n1. CREATE APP: https://github.com/corsego/59-turbo-streams-crud/commit/38e51d378518313d02fa0f691363aec11037dc5d\n2. SCAFFOLD \"MESSAGES\": https://github.com/corsego/59-turbo-streams-crud/commit/70d81e9399f8e204b8a6498d9c69135b88caddad\n3. Turbo #1 Re-render form when creating a message: https://github.com/corsego/59-turbo-streams-crud/commit/4516d1777daa963dbc65ba49ff4e9f7c4d3285ef\n4. Turbo #2 Add new messages to the list: https://github.com/corsego/59-turbo-streams-crud/commit/9c238c62e1d3be270c674ca7fb82b9ebab52df36\n5. Turbo #3 Remove messages: https://github.com/corsego/59-turbo-streams-crud/commit/b03bb338ef36a140338a0d4723bafa719021a808\n6. Turbo #4 Edit messages: https://github.com/corsego/59-turbo-streams-crud/commit/f38797b79e0daa82dff2c81047672f6574abca54\n7. Turbo #5 Update messages counter: https://github.com/corsego/59-turbo-streams-crud/commit/9468767a9171464b0d50c03dcb9860602196ffbe\n8. Turbo #6 Basic flash: https://github.com/corsego/59-turbo-streams-crud/commit/f103be90a5574418dbde4bcc155ef987d29f9b72"
  },
  {
    "id": "LWEMPqGhstU",
    "title": "#2 Production! Let's build a User Feedback app with Rails 7",
    "description": "- I'll attempt to build and launch an app in 10 dev hours.\nUser Feedback App (QnA) (askdemos.com): \n- hosts can create \"inboxes\" \n- users can add \"messages\" to \"inboxes\"\n- users can vote on \"messages\"\nTech stack:\n- Rails 7 alpha\n- Hotwire (Turbo + StimulusJS)\n- ViewComponent?\n\nSource code:\nhttps://github.com/yshmarov/askdemos\nKANBAN board:\nhttps://github.com/yshmarov/askdemos/projects/1"
  },
  {
    "id": "NGPhRmbBVlw",
    "title": "#1 Essentials! Let's build a User Feedback app with Rails 7",
    "description": "- I'll attempt to build and launch an app in 10 dev hours.\nUser Feedback App (QnA) (askdemos.com): \n- hosts can create \"inboxes\" \n- users can add \"messages\" to \"inboxes\"\n- users can vote on \"messages\"\nTech stack:\n- Rails 7 alpha\n- Hotwire (Turbo + StimulusJS)\n- ViewComponent?\n\nSource code:\nhttps://github.com/yshmarov/askdemos\nKANBAN board:\nhttps://github.com/yshmarov/askdemos/projects/1"
  },
  {
    "id": "p1bAVf6T58I",
    "title": "Ruby on Rails #58 Nested Resources",
    "description": "Episode source code: https://github.com/corsego/58-nested-resources/commit/9885432f93f1c5af100e10edc57d8f3358527738\n\nOfficial docs: https://guides.rubyonrails.org/routing.html#nested-resources"
  },
  {
    "id": "NZlN73NEgWM",
    "title": "#57 Database Architecture 101: Building an ERD (Entity Relationship Diagram) for UberEats clone",
    "description": "In this episode I'm looking and thinking aloud what the database for a restaurant management & delivery app can look like.\nLink to the diagram: https://dbdiagram.io/d/614cd4f2825b5b014610c1de"
  },
  {
    "id": "2AG-JR_zbSU",
    "title": "Ruby on Rails #56 Generate QR codes, Barcodes, use ServiceObjects",
    "description": "Source code for the episode:\nhttps://github.com/corsego/56-qrcode-barcode-serviceobject/commit/340e12e7a1e58a5f22a2935cbfc33e6420327262\n\ngood random tool to decode barcodes and qrcodes: \nhttps://zxing.org/w/decode.jspx"
  },
  {
    "id": "qzqh4zSZFCA",
    "title": "Code Along Video Subscription App #19 View Components",
    "description": "Episode source code:\nhttps://github.com/yshmarov/superails/commit/9bad0a4ef8a42a0d68b1d173beb13ee59b9be133\nOfficial docs:\nhttps://viewcomponent.org/guide/getting-started.html\nGreat article:\nhttps://teamhq.app/blog/tech/17-how-rendering-partials-can-slow-your-rails-app-to-a-crawl"
  },
  {
    "id": "fDOz0ljQB2k",
    "title": "Code Along Video Subscription App #18 Rubocop, Ruby Style Guide, Traceroutes",
    "description": "gem Rubocop:\nhttps://github.com/yshmarov/superails/commit/91c25ffd4ef6dcd4bd5692608dc6a76d81f13386\ngem Traceroute:\nhttps://github.com/yshmarov/superails/commit/ad70bbcc37ba83d6f292ebdf77b2ab6bd7348664\n\n\nHow to use Rubocop:\nhttps://blog.corsego.com/install-and-use-rubocop\nHow to use Traceroute:\n\nhttps://blog.corsego.com/gem-traceroute-find-controllers-without-routes"
  },
  {
    "id": "dB5Fw1lftHU",
    "title": "Code Along Video Subscription App #17 TomSelect.js - VanillaJS plugin to select or create tags",
    "description": "add tom select:\nhttps://github.com/yshmarov/superails/commit/4f9e22b27505d213c54e7df391b08f1bb5beb5a1\n\ntom select in stimulus without turbolinks:\n\nhttps://github.com/yshmarov/superails/commit/eeb0bddd6cc631c4c0eff22e59fd867324513ce7"
  },
  {
    "id": "4hwVvg2XdtQ",
    "title": "Ruby on Rails #55 Subdomain Multitenancy with Ernest Addae",
    "description": "Watch Ernest Addae create and troubleshoot an application with Subdomain Multitenancy (like shop1.domain.com, shop2.domain.com).\n\nAt the end we discuss how to make it work in production with Heroku and SSL.\n\nSecond episode with some improvements and deployment to Heroku coming soon, so stay tuned!\nErnest Addae on Twitter: https://twitter.com/Earnaddae\n\n2023 update: we never managed to meet up and record a QUALITY part 2 :(\n\n0:00 Warming up\n2:29 Start\n\ncreate accounts:\nhttps://github.com/corsego/55-subdomain-multitenancy/commit/724bdb88aa4d36c1e2c7a3311eeabb3fce9c0c24\nseed accounts:\nhttps://github.com/corsego/55-subdomain-multitenancy/commit/74da6ca2ea6a1155cd04846775d4865ff4923dc8\nredirect to subdomain:\nhttps://github.com/corsego/55-subdomain-multitenancy/commit/40040db2f06ca957b29c1a775fa64e6047b0fbb1\naccounts module:\nhttps://github.com/corsego/55-subdomain-multitenancy/commit/83eac1f04a91c3b1345e70c456118bceba233b86\nscaffold posts:\nhttps://github.com/corsego/55-subdomain-multitenancy/commit/1dca224f136e159797e560d3d06b18da72e1a636\naccount has many posts:\nhttps://github.com/corsego/55-subdomain-multitenancy/commit/d50cf25f7bfbde6a7a6d3db934e7b9a6a64a7c33\nScoping Posts to Accounts module:\nhttps://github.com/corsego/55-subdomain-multitenancy/commit/1827725e15d779644e0d114cf261dbfc2b777538\nConstraints:\nhttps://github.com/corsego/55-subdomain-multitenancy/commit/906c766118c954577f9f1079f5cc06e08d14ea41\nBetter seeds:\nhttps://github.com/corsego/55-subdomain-multitenancy/commit/bec196da6c1c191545c3b38d04ed3f902ba84abd\nReadme for LetsEncrypt SSL with Heroku production:\nhttps://github.com/corsego/55-subdomain-multitenancy/commit/10e889eb16db68a87d5ae19ce21b954f6e5083bc"
  },
  {
    "id": "0fulkQIeut0",
    "title": "Code Along Video Subscription App #16: Fat Model Skinny Controller, Post has many Tags",
    "description": "fat model, skinny controller:\n\nhttps://github.com/yshmarov/superails/commit/f5feafb177da05cf8f5f0f0f97330d47a0b50563\nmerge current_user in comment_params for new action:\n\nhttps://github.com/yshmarov/superails/commit/22e82ba6fff0f5313e2d2db0e32bece73fa98a35\nerrors patial for form objects: \n\nhttps://github.com/yshmarov/superails/commit/d321e0285872e82bb2606a2205c50c02f31faa04\ncreate tags and taggings: \n\nhttps://github.com/yshmarov/superails/commit/0373d1ff249334edb62f473a119517b7b742cef3\nconter_cache comments to comments and posts: \n\nhttps://github.com/yshmarov/superails/commit/762a9c144f3c7f439fb3a97f1fadd08531594e38"
  },
  {
    "id": "1rMwQsLRq5A",
    "title": "Code Along Video Subscription App #15: Advanced ActsAsVotable Scopes - Bookmarks, Watchlist",
    "description": "vote_scope for like functionality:\nhttps://github.com/yshmarov/superails/commit/e4ea4f2bde0d3b5d9a44948868992fde93f5b18a\nbookmarks with acts_as_votable:\nhttps://github.com/yshmarov/superails/commit/49baa0b9cd0e147d927f9e776656b7999bb0911a\nadd cached like votes to posts:\nhttps://github.com/yshmarov/superails/commit/8da73df763dba253f3cf7381daef72879550ea06\nadd to watchlist, mark as complete:\nhttps://github.com/yshmarov/superails/commit/fc78b24336a5ce1f8b5312093d98f6dd217b785b\nstyling new like buttons:\nhttps://github.com/yshmarov/superails/commit/abfb659a742c24d732991aa8b94529c0126f253f\nbetter way to display upvoters and downvoters of a post:\nhttps://github.com/yshmarov/superails/commit/99553d833824e7d73229bae2f24f4c467f718459"
  },
  {
    "id": "iLKnbK__2_M",
    "title": "Ruby on Rails #54 Gem VanillaNested by Ariel Juodziukynas (Cocoon successor without jQuery)",
    "description": "Gem source code: https://github.com/arielj/vanilla-nested\nAriel Juodziukynas on Twitter: https://twitter.com/arieljuod"
  },
  {
    "id": "xclvzA5HDAc",
    "title": "Code Along Video Subscription App #14: Infinite Nested Comments, Embed Vimeo Videos",
    "description": "Fix all bugs with nested comments:\nhttps://github.com/yshmarov/superails/commit/9a567ce5a9a9a709345f86757c5ab69b3a4009e6\nEmbedding Vimeo videos:\nhttps://github.com/yshmarov/superails/commit/e347bc85aaca2708a39fbcd84e83710b050eb0d1"
  },
  {
    "id": "aHDerk27eJA",
    "title": "Code Along Video Subscription App #13: Polymorphic Comments, Nested Resources",
    "description": "basic polymorphic comments:\nhttps://github.com/yshmarov/superails/commit/1dcc3181c2027b73bb1d239b2535a37d1320c5da\ncss for comments:\nhttps://github.com/yshmarov/superails/commit/76c3fe0007bc019783e0fca9b136189a827fe908\nreply to comments:\nhttps://github.com/yshmarov/superails/commit/632cb9ad4711b596813eebf3cf991589e978e639"
  },
  {
    "id": "pT-5b2ZII_4",
    "title": "Code Along Video Subscription App #12: Vote stats, gem Meta-Tags, Friendly ID: history & finders",
    "description": "create posts through current_user association:\nhttps://github.com/yshmarov/superails/commit/cca5fd8a0d0d6a4f00ee67c5a160ae7489e5360b\n\nvote search scopes for users and posts:\nhttps://github.com/yshmarov/superails/commit/d79c121c815726b29171da8c8fdc19b7dcc98bc7\n\ngem friendly_id finders and histroy:\nhttps://github.com/yshmarov/superails/commit/2d47ffb1ddb5f8b7014de50464fa8fe64addabf2\n\ndont display zero votes count in progress bar:\nhttps://github.com/yshmarov/superails/commit/79f3dd776445e23e3ab69b623f4444ee4d66e99c\ngem meta-tags:\nhttps://github.com/yshmarov/superails/commit/d489756cc1f1b181e90f86c909d5ba9ce113ff1b"
  },
  {
    "id": "oxdgYIHtlFc",
    "title": "Ruby on Rails #53 Gem Public Activity - add an Activity Feed to your app",
    "description": "Gem source:\nhttps://github.com/chaps-io/public_activity\nEpisode source code:\nhttps://github.com/corsego/53-gem-public-activity/commit/e598b93ae8942479c62a092c01299493ae2cc3da"
  },
  {
    "id": "6orj2qU6JdA",
    "title": "Ruby on Rails #52 gem Friendly ID: The Complete guide. Generate readable URLs like a PRO",
    "description": "episode source code:\nhttps://github.com/corsego/52-friendly-id/commit/00989cb4dc0a14409e067220707e24498208bd4e\ngem source:\nhttps://github.com/norman/friendly_id\nofficial docs:\nhttp://norman.github.io/friendly_id/file.Guide.html"
  },
  {
    "id": "nFJZuqqBlds",
    "title": "Ruby on Rails #51 array of checkboxes in a Rails app",
    "description": "episode source code:\nhttps://github.com/corsego/51-checkbox-array/commit/dc7183f680bc48184e6481c458611adae0706505"
  },
  {
    "id": "Ac8syCb01ys",
    "title": "Ruby on Rails #50 ActiveRecord Enum - when and why to use enums?",
    "description": "without enums:\nhttps://github.com/corsego/50-rails-enums/commit/c8d725750760884216c429d10c5edcb815ccd5b9\nenums as integers:\nhttps://github.com/corsego/50-rails-enums/commit/4ca2195316931eac1cfae8b12ebd1d91ddc83ce3\nenums as strings:\nhttps://github.com/corsego/50-rails-enums/commit/496c143c2c00945aa9beab0a8054fb1540ffecfb\nofficial guide:\nhttps://edgeapi.rubyonrails.org/classes/ActiveRecord/Enum.html"
  },
  {
    "id": "xxkx57-vbQI",
    "title": "Ruby on Rails #49 gem Pundit for Authorization - Complete Guide",
    "description": "Restrict access to different views and actions in your application based on users roles.\n\nEpisode source code:\nhttps://github.com/corsego/49-gem-pundit/commit/3e3c65d8b6deaf382dea5ce554c732e85731d6d2\nMy text notes for this episode:\nhttps://blog.corsego.com/complete-guide-to-gem-pundit\nGem pundit source code:\nhttps://github.com/varvet/pundit\n\n0:00 Authorization without a gem\n2:20 Install gem Pundit, basic usage\n7:10 User Policy - only admin can edit\n10:22 Create Post Policy\n11:50 Pundit Scopes\n14:10 Authorization conditions in views\n16:34 Summary"
  },
  {
    "id": "URDKxGn0pxo",
    "title": "Ruby on Rails #48 Gem Rolify for assigning user roles - Complete Guide",
    "description": "episode source code:\nhttps://github.com/corsego/48-gem-rolify/commit/929b6646efac8467f2e502266cf2b2d8b8683aa0\ngem rolify source code:\nhttps://github.com/RolifyCommunity/rolify/wiki/Usage"
  },
  {
    "id": "X8kLhQMx1lY",
    "title": "Ruby on Rails #47 TIP: create a list of buttons to change status",
    "description": "episode source code:\nhttps://github.com/corsego/47-button-to-update-status/commit/3ce355748bf192956c1da7b0017c04e018383d03"
  },
  {
    "id": "4Z4yVSXDRyw",
    "title": "Ruby on Rails #46 gem invisible_captcha - pure Ruby reCaptcha alternative. No more bots in your app!",
    "description": "episode source code: https://github.com/corsego/46-invisible_captcha/commit/8f1cfc329df995c5b7d633f260a5d3f414d4c837\ngem invisible_captcha docs:\nhttps://github.com/markets/invisible_captcha"
  },
  {
    "id": "5YPFAHOeo-k",
    "title": "Ruby on Rails #45 config_for Settings.yml - add default settings to your app",
    "description": "episode source code:\nhttps://github.com/corsego/45-config_for_settings/commit/0cf11eccafccc196968cdcd1dc76b75ccec2911d\nofficial docs:\nhttps://api.rubyonrails.org/classes/Rails/Application.html#method-i-config_for"
  },
  {
    "id": "30FZFU3oTiQ",
    "title": "Ruby on Rails #44 Rails Counter Cache: Count associated child records CORRECTLY",
    "description": "episode source code:\nhttps://github.com/corsego/44-counter_cache/commit/b543ff789d0ff47c570ca0247f6dd3ddd638d04f\n\nofficial docs:\nhttps://guides.rubyonrails.org/association_basics.html#options-for-belongs-to-counter-cache"
  },
  {
    "id": "2YKZBX60LfI",
    "title": "Code Along Video Subscription App #11: gem Rouge, gem InvisibleCaptcha, highlight search results",
    "description": "In this Code-Along video series we'll be building a new home for all the videos - SupeRails.com.\n\nGithub repo: https://github.com/yshmarov/superails\nLive demo: https://superails.com/\n\nredcarpet + rouge = good markdown\nhttps://github.com/yshmarov/superails/commit/db16d1ca11da2d242099e46fa9b3016cb8576ccb\nhighlight search results \nhttps://github.com/yshmarov/superails/commit/7eabd2fe276ce1ec19a7d47228b10376b2732abd\nassign name if not provided by social login\nhttps://github.com/yshmarov/superails/commit/f8ac3d59d7e188870bac3d5671682197e304a1f5\nprogess bar update after vote\nhttps://github.com/yshmarov/superails/commit/fe129b06560419f4872e49cf0316a27fedfd86d9\ngem invisible_captcha - fewer bot signups\nhttps://github.com/yshmarov/superails/commit/c86918a838a9aa6bb1895269c18235ea1886d035\n\nLEGACY LINKS:\nassign name if not provided by social login\nhttps://github.com/yshmarov/superails/commit/a4f0855d23013ff52aef83102ba862c86bf87910\nprogess bar update after vote\nhttps://github.com/yshmarov/superails/commit/e9e3619822cc56001e2a91f83c93a735058fca59\ngem invisible_captcha - fewer bot signups\nhttps://github.com/yshmarov/superails/commit/3ff2fadc3ca8173427fd4c637b3b0f7024c8d51a"
  },
  {
    "id": "5HMWE8g6_tc",
    "title": "Ruby on Rails #43 Gem Devise Invitable - the correct way to create or invite users to your app",
    "description": "Gem source: \nhttps://github.com/scambra/devise_invitable\nEpisode code: \nhttps://github.com/corsego/40-devise-everything/commit/6a408b0ee0991749d32321a130b28184efbbff21\n\nIntro. Creating users manually\nInstalling the gem\nInviting users\nButton to resend invitation"
  },
  {
    "id": "FStUjcpP5sc",
    "title": "Code Along Video Subscription App #10: Bootstrap, Friendly ID, ExceptionNotification",
    "description": "In this Code-Along video series we'll be building a new home for all the videos - SupeRails.com.\n\nGithub repo: https://github.com/yshmarov/superails\nLive demo: https://superails.com/\n\nbootstrap styling\nhttps://github.com/yshmarov/superails/commit/ea27f3e693e91cce190b62ba10f657f7e3819b60\nprogress bar for up down votes\nhttps://github.com/yshmarov/superails/commit/ea8d098ead28aa6bb17d25240006ac01a8b36398\ngem frienldy id\nhttps://github.com/yshmarov/superails/commit/b1c67b16a0326c68013f8638c5f18319455b98fc\ngem exception_notification\nhttps://github.com/yshmarov/superails/commit/e5c4bc1da4d9783cb3b23f278f5f198154cd6ec5"
  },
  {
    "id": "fLEDAI3rhIQ",
    "title": "Ruby on Rails #42 Devise Lockable. Ban or Unban users as you please.",
    "description": "Official Devise Lockable Docs:\nhttps://github.com/heartcombo/devise/wiki/How-To:-Add-:lockable-to-Users\n\ndevise lockable if password wrong 3 times\nhttps://github.com/corsego/40-devise-everything/commit/e72151d4c57043a0607b5bb558748ad9621539b4\nban or unban users\nhttps://github.com/corsego/40-devise-everything/commit/ce1bd0ee4567a0a2f08238da1402bfda4dfd96bc"
  },
  {
    "id": "Aqn68wHcKyI",
    "title": "Code Along Video Subscription App #9: Stimulus Components CharacterCount, AutoGrow; Post Description",
    "description": "In this Code-Along video series we'll be building a new home for all the videos - SupeRails.com.\n\nGithub repo: https://github.com/yshmarov/superails\nLive demo: https://superails.com/\n\n\nadd description to posts\nhttps://github.com/yshmarov/superails/commit/85d1c1ef9809be9a801133bb4be88c5512d9903c\n validate length of posts \nhttps://github.com/yshmarov/superails/commit/06f9415a840fe30d5e655410fa40aed3578ad2a0\n add post description to seeds \nhttps://github.com/yshmarov/superails/commit/10d6fb9a4000e9d07a1b29f709626278e9b68c08\n better use of partials \nhttps://github.com/yshmarov/superails/commit/25fc7546e4d5c67b81b4cb0b26cdd3a4add21bac\n better ransack \nhttps://github.com/yshmarov/superails/commit/b9de4d1cb2d69af318dcc96e08974e64c751b16d\n added an about page, navbar and footer styling, voting links inline \nhttps://github.com/yshmarov/superails/commit/36c1b58f0b229b01a53404555b79e7e307ad9549\n install stimulus js \nhttps://github.com/yshmarov/superails/commit/7737f0ef25597c1427758268fec0bc4120a2e90e\n Stimulus Textarea Autogrow \nhttps://github.com/yshmarov/superails/commit/f20107cbd9917d9d88d115d89728cb8e3a97cc4b\n Stimulus Character Counter \nhttps://github.com/yshmarov/superails/commit/2e829e13c96925afba987a11907e20f30bb2b191"
  },
  {
    "id": "GXsL2p0YoHg",
    "title": "Ruby on Rails #41 Devise Confirmable - no more users with fake emails!",
    "description": "Devise Confirmable:\nhttps://github.com/corsego/40-devise-everything/commit/f5e519ebb7c22150024a6027186f05eb651f81f8\nOfficial Wiki:\nhttps://github.com/heartcombo/devise/wiki/How-To:-Add-:confirmable-to-Users"
  },
  {
    "id": "qTIBmxMRz80",
    "title": "Code Along Video Subscription App #8: Posts access, AJAX voting, pagination, search, styling",
    "description": "Github repo:\nhttps://github.com/yshmarov/superails\nLive demo:\nhttps://superails.com/\n\nbasic bootstrap styling for posts and users, post view validations\nvote for posts with gem acts_as_votable\nposts pagination and ransack search\nransack sorting for posts\n\nbasic bootstrap styling for posts and users, post view validations https://github.com/yshmarov/superails/commit/ab372f106f104461cd8e93fc3e52a59fed43d8e7\nvote for posts with gem acts_as_votable https://github.com/yshmarov/superails/commit/69fba2e3cdad33c47a05e62545c7e0a0f9187696\nposts pagination and ransack search https://github.com/yshmarov/superails/commit/8988ac2b7004e9d26e065a7db8abf07a7b694d84\nransack sorting for posts\nhttps://github.com/yshmarov/superails/commit/9b1317b5fbc6df02099e49e79c070d7d64c8d246"
  },
  {
    "id": "7Rs6CT9G5AM",
    "title": "Ruby on Rails #40 Devise Trackable, Users Index page",
    "description": "devise trackable: \nhttps://github.com/corsego/40-devise-everything/commit/3eb1c4fbbd67af2a8f7be217ab56550c1d91f9ee\nusers index view: \nhttps://github.com/corsego/40-devise-everything/commit/c7d05b3fe2941046f8bb84a07416bff47bcc1f2c\nOfficial Wiki:\nhttps://github.com/heartcombo/devise/wiki/How-To:-Add-:trackable-to-Users"
  },
  {
    "id": "tk69LvxlcYE",
    "title": "Code Along Video Subscription App #7: FINISH Stripe Subscription Payments, Billing Management",
    "description": "HELP NEEDED: While watching, can You add timecodes to the video?\n\nIn this Code-Along video series we'll be building a new home for all the videos - SupeRails.com.\n\nGithub repo: \nhttps://github.com/yshmarov/superails\nLive demo: \nhttps://superails.com/\n\nadd stripe to users, pricing pages, subscription webhooks\nstripe billing portal\npremium posts available for active subscribers\n\nadd stripe to users, pricing pages, subscription webhooks https://github.com/yshmarov/superails/commit/ff9b36d1c11b40ac672dfff93befc9a3a448cc0f\nstripe billing portal https://github.com/yshmarov/superails/commit/ff9b36d1c11b40ac672dfff93befc9a3a448cc0f\npremium posts available for active subscribers https://github.com/yshmarov/superails/commit/e9f31e5c547df1a4c678e1dfdc15591aa5528e4a"
  },
  {
    "id": "3vZtM2lskKM",
    "title": "Ruby on Rails #39 Devise Authentication from ZERO",
    "description": "Episode covering user log-in functionality for for entry-level developers.\n\nSource code: https://github.com/corsego/39-devise-basics\nGem devise: https://github.com/heartcombo/devise#getting-started\n\n0:00 Introduction\n1:20 Static Pages. Hello world \n5:35 Install Gem Devise\n11:25 Url for user to sign in\n12:25 see if user is logged in\n13:47 LogOut button\n15:11 see user data only if logged in\n15:51 conditionally display user data or LogOut\n16:25 conditionally LogIn or LogOut\n18:39 user-only access"
  },
  {
    "id": "2zFCb5jUtyI",
    "title": "Code Along Video Subscription App #6: premium posts, stripe gem, stripe webhooks",
    "description": "In this Code-Along video series we'll be building a new home for all the videos - SupeRails.com.\n\nGithub repo: https://github.com/yshmarov/superails\nLive demo: https://superails.com/\n\nseeds for posts, markdown for posts partial \nadd premium boolean to posts\ngem stripe, add stripe customer id to users\nstripe webhooks\nupdate path to webhook credential\n\nseeds for posts, markdown for posts partial https://github.com/yshmarov/superails/commit/1a611551db70833cddb4843cdf83d1fea2bbabee\nadd premium boolean to posts https://github.com/yshmarov/superails/commit/edb7c1f6376b4ee3efd432bbc0854270aeb11ca3\ngem stripe, add stripe customer id to users https://github.com/yshmarov/superails/commit/2030893c5eddf87aff61682504e9f315ff4ecb90\nstripe webhooks https://github.com/yshmarov/superails/commit/d4cc78fe2fa345dca025f0f5b47579ac2e284cc4\nupdate path to webhook credential https://github.com/yshmarov/superails/commit/a550eeb9c7fcf37b33cc354e151d71122363bc0b"
  },
  {
    "id": "gFGIuK1dPK8",
    "title": "Code Along Video Subscription App #5: Helpers, Devise Invitable, Posts, Markdown, CounterCache",
    "description": "In this Code-Along video series we'll be building a new home for all the videos - SupeRails.com.\n\nGithub repo: https://github.com/yshmarov/superails\nLive demo: https://superails.com/\n\nupdate mailer emails\nactive link to helpers\ndont display pagination if 1 page\nhelper to see boolean color\ngem devise_invitable\nscaffold posts\nposts basic styling, relationships\ncounter_cache posts to users\nadd markdown\n\nupdate mailer emails https://github.com/yshmarov/superails/commit/18202be0a5566674119870a47e864474fe7e0507\nactive link to helpers https://github.com/yshmarov/superails/commit/a429845a48102bd80905dd57d68c503bffa0635c\ndont display pagination if 1 page https://github.com/yshmarov/superails/commit/50f387d422815060b8c10d91f8b3db574a8d9272\nhelper to see boolean color https://github.com/yshmarov/superails/commit/9e1b282261403f925fe55a0d0ab7ee26f3836d41\ngem devise_invitable https://github.com/yshmarov/superails/commit/94a597e6fd51057835028a20e5037a13ad0085cb\nscaffold posts https://github.com/yshmarov/superails/commit/c1339bff389403d59813eadbe3ee6c0058f53d26\nposts basic styling, relationships https://github.com/yshmarov/superails/commit/81b447f73d565748d43dda3771a0dcbd30294076\ncounter_cache posts to users https://github.com/yshmarov/superails/commit/03854eb11964fa2c636c45f1cde6064755820479\nadd markdown https://github.com/yshmarov/superails/commit/1ca4e6d32155651d29995a87ec4cca21a1bfcf1f"
  },
  {
    "id": "GO3gOdwSWw0",
    "title": "Code Along Video Subscription App #4: seeds, faker, pagy, ransack, strftime",
    "description": "In this Code-Along video series we'll be building a new home for all the videos - SupeRails.com.\n\nGithub repo: https://github.com/yshmarov/superails\nLive demo: https://superails.com/\n\nseeds.rb and gem faker https://github.com/yshmarov/superails/commit/6aab4781b681f0256313b95a226f2f2342dc0e7a\ngem pagy for pagination https://github.com/yshmarov/superails/commit/cb5dad78bb9ee7fabb7e0c3099b445eef0a7edde\ngem ransack to search and filter users gem ransack to search and filter users\nuser created_at strftime https://github.com/yshmarov/superails/commit/bd5eaee19881e4e59f7777fcc19b78d6fd68a70a"
  },
  {
    "id": "h5M34W4bezU",
    "title": "Code Along Video Subscription App #3: Notifications, Devise Confirmable, AWS SES, LetterOpener",
    "description": "In this Code-Along video series we'll be building a new home for all the videos - SupeRails.com.\n\nGithub repo: https://github.com/yshmarov/superails\nLive demo: https://superails.com/\n\n0:00 Intro\n0:26 styling for notifications\n10:20 devise confirmable\n17:40 confirm account from console\n18:52 auto sign in after confirmation\n21:50 autoconfirm omniauth email \n24:30 Sending Emails in development and production\n29:35 Amazon SES + your domapn (namecheap)\n33:33 Get Amazon SES API keys\n39:08 Amazon SES email address not verified\n41:09 default outbound email addresses\n43:22 gem letter opener\n48:38 I AM TIRED\n\nstyling for notifications https://github.com/yshmarov/superails/commit/306be3598f057801683ba691914fba24feb06283\ndevise confirmable https://github.com/yshmarov/superails/commit/254d5209ac1c553e7687ddc0ad204c32ac10554d\nsend emails in production with aws ses https://github.com/yshmarov/superails/commit/6bca0dd421db86262d91a85e312bceb27b719ee1\ngem letter opener for development https://github.com/yshmarov/superails/commit/ed4d91dd5ef8705340c51f483516b278d491ccff"
  },
  {
    "id": "DZ34CJcNHeo",
    "title": "Code Along Video Subscription App #2: Thumbnail, Logo, UsersController, Devise Trackable",
    "description": "In this Code-Along video series we'll be building a new home for all the videos - SupeRails.com.\n\nGithub repo: https://github.com/yshmarov/superails\nLive demo: https://superails.com/\n\n0:00 introduction\n0:42 boring footer styling - responsiveness\n1:57 boring word-break styling - responsiveness\n3:34 add thumbnail and logo, footer layout, word break\n8:17 omniauth callback failure\n8:56 split username\n10:08 responsive header dropdown\n11:51 users index and show\n22:00 Boilerplate?!\n22:30 Link to user profile\n23:37 after_sign_in_path user_path(user)\n25:30 devise trackable\n\nadd thumbnail and logo, footer layout, word break https://github.com/yshmarov/superails/commit/9fa76bdf60ce7510399a8d8bfbe0ee4c3fd9e9aa\nomniauth callback failure, split username, responsive header dropdown https://github.com/yshmarov/superails/commit/77add270ea4ec2d10c9b4b4ad18e7b46d5b6d1cd\nusers index and show https://github.com/yshmarov/superails/commit/50bf47f856e784fecc5f9938d436e2226af25fee\nafter_sign_in_path user_path(user) https://github.com/yshmarov/superails/commit/b4a02acc94a687d7726c34469fa4be44ec17a5f2\ndevise trackable https://github.com/yshmarov/superails/commit/1cbfebafd7e15dfe09a7b9e96a3ae960fa2a3d1a"
  },
  {
    "id": "zVCCjWUSnI8",
    "title": "Code Along Video Subscription App #1: Devise Omniauth, Heroku SSL, Bootstrap, Navbar, Footer",
    "description": "In this Code-Along video series we'll be building a new home for all the videos - SupeRails.com.\n\nGithub repo: https://github.com/yshmarov/superails\nLive demo: https://superails.com/\n\n0:00 introduction\n1:30 railsnew.io \n2:33 initialize app\n4:30 create github repo\n5:12 static public controller with pages\n9:27 create heroku app\n11:20 autodeploy git repo to heroku\n11:59 push to heroku \n12:25 connect real domain\n14:33 paid heroku plan for SSL\n15:58 add bootstrap\n22:02 SSL HTTPS by default\n23:52 FontAwesome icons\n26:37 install gem devise\n31:12 devise navigation and partials, no auth required to view static public\n36:23 bootstrap devise fontawesome navbar\n44:50 add a footer\n51:51 omniauth google\n01:04:03 add omniauth fields to users\n01:11:26 gem omniauth github\n\nCOMMITS:\ninitialize app https://github.com/yshmarov/superails/commit/54eb8cabaac6293b6b3f2a7c0833d991e6a05edd\nstatic public controller with pages https://github.com/yshmarov/superails/commit/079ad18e8a343e9f02a07534cf39e4c449dc823b\nadd bootstrap https://github.com/yshmarov/superails/commit/2f2bca92db1d2f6c8293c84edf0f0f039c8afb7e\nforce ssl https://github.com/yshmarov/superails/commit/f4a6bc80f993b66f26f7fad78fd958e7bdaca77c\ninstall fontawesome https://github.com/yshmarov/superails/commit/2dc0b766d1c305af30271100c0354403c3bf56a9\ninstall gem devise https://github.com/yshmarov/superails/commit/033f25af1591190fabf61af39ddc57205486d293\ndevise navigation and partials, no auth required to view static public https://github.com/yshmarov/superails/commit/9cb71ff0b208c7b56040a02b3c4d6c921f1853f3\nbootstrap devise fontawesome navbar https://github.com/yshmarov/superails/commit/8f77879a320ea80388c57e429130eae05aec4a03\nadd a footer https://github.com/yshmarov/superails/commit/66b03129cdd4e7f519cc88babc0e6b7b8136978f\nomniauth google https://github.com/yshmarov/superails/commit/b45ee253bda5dd2376a660969c4062a3ec2bb5a4\nadd omniauth fields to users https://github.com/yshmarov/superails/commit/2b9c6e907ce23f917f779d2a832ac7e6843c5db8\ngem omniauth github https://github.com/yshmarov/superails/commit/a0a3ce1599be461278e5e81059a5138d8ee6dea3"
  },
  {
    "id": "cZzp70PiU30",
    "title": "Ruby on Rails #38 Install Fontawesome 5 with Rails 6, yarn and webpacker",
    "description": "Blogpost covering the topic:\nhttps://blog.corsego.com/rails-6-install-fontawesome-with-webpacker\nSource code:\nhttps://github.com/corsego/38-fontawesome5"
  },
  {
    "id": "J5g3CGXyn7k",
    "title": "Ruby on Rails #37 Install Bootstrap 5 with Rails 6, Yarn and Webpacker",
    "description": "Blogpost covering the topic:\nhttps://blog.corsego.com/rails-bootstrap-5-yarn\nSource code:\nhttps://github.com/corsego/37-bootstrap5/commit/3a8df15c9fa1351f3bb853219ec854ec1e644ced"
  },
  {
    "id": "4JNDy03d0Uw",
    "title": "Ruby on Rails #36 Action Text - Rich text editing with Trix",
    "description": "episode source code:\nhttps://github.com/corsego/36-actiontext\nofficial guide:\nhttps://edgeguides.rubyonrails.org/action_text_overview.html"
  },
  {
    "id": "uPSPaZL-1bY",
    "title": "Ruby on Rails #35 Google API Console, oAuth Consent Screen",
    "description": "Just in case you have issues getting the API keys to work"
  },
  {
    "id": "Hx7viHOizWk",
    "title": "Ruby on Rails #34 Github oAuth in Development and Production",
    "description": "Just in case you have issues, in this episode I try to go through of running a github oAuth app both in development & production"
  },
  {
    "id": "AFdd3VdKA8o",
    "title": "Ruby on Rails #33 Gem Dotenv - alternative to Rails credentials",
    "description": "Source Code of the episode:\nhttps://github.com/corsego/29-omniauth/commit/2505525092333dc4c436c7df19c0bac6b159192c\nThe gem:\nhttps://github.com/bkeepers/dotenv"
  },
  {
    "id": "XuXC8BvJM4Y",
    "title": "Ruby on Rails #32 gem omniauth google (social log in with Google)",
    "description": "The gem:\nhttps://github.com/zquestz/omniauth-google-oauth2\nget an API key:\nhttps://console.cloud.google.com/apis/dashboard\ngem omniauth google:\nhttps://github.com/corsego/29-omniauth/commit/24d09b9537b95a3c9fa56f8c336ab26bce3e5c9f"
  },
  {
    "id": "UUwnyi1OD74",
    "title": "Ruby on Rails #31 Save Personal Data from Social Login to your app",
    "description": "The auth hash:\nhttps://github.com/zquestz/omniauth-google-oauth2#auth-hash\nSource code:\nhttps://github.com/corsego/29-omniauth/commit/8c63c0f96957a7b05003961679855423e4bea99f"
  },
  {
    "id": "ijFAWWD4_JM",
    "title": "Ruby on Rails #30 Social log in with Github (omniauth 2.0)",
    "description": "gem omniauth-github:\nhttps://github.com/omniauth/omniauth-github\nDevise + Omniauth integration - basic docs:\nhttps://github.com/zquestz/omniauth-google-oauth2#devise\nGem agains \"Authenticity error\":\nhttps://github.com/cookpad/omniauth-rails_csrf_protection\nUltimate text guide:\nhttps://blog.corsego.com/devise-omniauth-github\nSource code:\nhttps://github.com/corsego/29-omniauth/commit/dc435261173dd3b8bac22971f4ab9daf86842dd9"
  },
  {
    "id": "1ncuRodXi88",
    "title": "Ruby on Rails #29 Action Mailer: Send emails with Amazon Simple Email Service in production",
    "description": "The problem with Letter Opener:\nhttps://github.com/ryanb/letter_opener#remote-alternatives\nTest SES emails:\nhttps://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-simulator.html\nEpisode source code:\nhttps://github.com/corsego/26-action-mailer/commit/ac0fbc1dc40aab72526e37880450431fe41eb630"
  },
  {
    "id": "eYhi_rbnOo8",
    "title": "Ruby on Rails #28 Action Mailer: Gmail SMTP - send emails in production for free",
    "description": "Source Code:\nhttps://github.com/corsego/26-action-mailer/commit/04e3f81a5318382183c8fe6c7fc4abc481b15292\nDocs:\nhttps://guides.rubyonrails.org/action_mailer_basics.html#example-action-mailer-configuration"
  },
  {
    "id": "Ubrr9mqE94o",
    "title": "Ruby on Rails #27 Gem Letter Opener - best way to preview emails in development",
    "description": "gem letter_opener:\nhttps://github.com/ryanb/letter_opener\nSource Code for the Episode:\nhttps://github.com/corsego/26-action-mailer/commit/24fb10065fb5c4502b15ea75d651aec8e61413e0\n\nTo fix Launchy error - run these commands in console:\nexport BROWSER=/dev/null\nexport LAUNCHY_DRY_RUN=true"
  },
  {
    "id": "yqxORosQQbo",
    "title": "Ruby on Rails #26 send emails with Action Mailer - Complete Guide",
    "description": "In this episode we will use ActionMailer to send the User an email after he creates a Post. We will also explore different options and ways to customise our emails.\n\nAction Mailer docs:\nhttps://guides.rubyonrails.org/action_mailer_basics.html\nSource Code for the Episode:\nhttps://github.com/corsego/26-action-mailer/commit/6519734de30c87b39d90e726ebb602a23ff0fd40\nMy text notes for this episode: https://blog.corsego.com/action-mailer-basics\n\n0:00 Intro\n0:47 Generate a new Mailer\n3:30 Preview the mailer\n4:00 Override default FROM address\n4:40 Override TO, CC, BCC email address\n6:10 Override email SUBJECT\n7:34 Send email from controller\n9:20 custom email params (current_user, post)\n11:34 add sender name to default FROM address\n13:45 Attach image\n15:15 Display attached image inside email body\n16:12 Update signature for all emails"
  },
  {
    "id": "woEgyQ8I7RA",
    "title": "Ruby on Rails #25 gem Active Storage Validations",
    "description": "install gem active_storage_validations:\nhttps://github.com/corsego/20-active_storage/commit/32ebf91ec378423c8cd1f9a2230843b870fe2734\ngem active_storage_validations:\nhttps://github.com/igorkasyanchuk/active_storage_validations"
  },
  {
    "id": "QcaSdsXtdvo",
    "title": "Ruby on Rails #24 Active Storage - Deleting Attachments (Ultimate approach)",
    "description": "action to delete post avatar: \nhttps://github.com/corsego/20-active_storage/commit/f091a54c006183f4a86e226050ff7028493b400d\ndelete any attachment object: \nhttps://github.com/corsego/20-active_storage/commit/c350b033fcdcd9ec6e3a92d6eb8881d58b3e56f9"
  },
  {
    "id": "Zc043m1YBNI",
    "title": "Ruby on Rails #23 Active Storage - Display Audio, Video, PDF attachments",
    "description": "display different attachment types:\nhttps://github.com/corsego/20-active_storage/commit/a932b8e4ce861827da9cc4e86830b1e73ff55565\nHTML5 audio and video tags:\nhttps://www.html5tutorial.info/html5-video.php\nDisplaying Images, Videos, and PDFs:\nhttps://edgeguides.rubyonrails.org/active_storage_overview.html#displaying-images-videos-and-pdfs"
  },
  {
    "id": "u3dk5lSIGH8",
    "title": "Ruby on Rails #22 ActiveStorage Direct Uploads, AWS S3 CORS",
    "description": "Source Code:\nhttps://github.com/corsego/20-active_storage/\nActive Storage Direct Uploads Docs:\nhttps://edgeguides.rubyonrails.org/active_storage_overview.html#direct-uploads\n\n0:00 The Mission\n0:15 Add Direct Uploads\n2:00 CORS problem in Direct Uploads + Cloud Storage\n3:30 add CORS to S3\n4:47 works now!\n5:43 summary"
  },
  {
    "id": "OWBWXOcx1rU",
    "title": "Ruby on Rails #21 Active Storage With Amazon S3 Cloud Storage",
    "description": "aws s3 for file storage:\nhttps://github.com/corsego/20-active_storage/commit/ea323d39058add4aa46868b7baf4c2d91550e60d\n\nActiveStorage docs:\nhttps://edgeguides.rubyonrails.org/active_storage_overview.html\nHow to use Credentials in Ruby on Rails 6? TLDR:\nhttps://blog.corsego.com/ruby-on-rails-6-credentials-tldr\n\n0:00 The Problem\n02:01 Install AWS S3 cloud storage\n05:19 AWS IAM\n08:35 Local storage = S3\n09:13 gem aws-sdk-s3\n11:05 Production\n15:42 Summary"
  },
  {
    "id": "tRRnV67bK9c",
    "title": "Ruby on Rails #20 ActiveStorage - attach avatar, attach images",
    "description": "Source code: \nhttps://github.com/corsego/20-active_storage/\nDocs: \nhttps://edgeguides.rubyonrails.org/active_storage_overview.html\n\ninstall active_storage, post has one avatar:\nhttps://github.com/corsego/20-active_storage/commit/51a249ff58512284f492f5703da22f1f068ec1f9\npost has many images:\nhttps://github.com/corsego/20-active_storage/commit/f1775239f9c7471b0577fccd6e944964de383f10\n\n0:00 The Problem\n1:12 Install ActiveStorage\n1:56 Has One Attached\n4:30 Where are files stored?\n06:00 Displaying images\n08:19 Summary 1\n09:59 Editing=Replacing Attachments\n10:17 Has Many Attached\n15:04 Next Steps"
  },
  {
    "id": "1tsWL4EjhMo",
    "title": "Ruby on Rails #19 Gem Pagy - Ultimate Guide to the best pagination gem",
    "description": "Pagy Source code:\nhttps://github.com/ddnexus/pagy\nPagy Homepage:\nhttps://ddnexus.github.io/pagy/how-to#gsc.tab=0\nSource code:\nhttps://github.com/corsego/19-pagy\nInstall Bootstrap 5 on Rails 6:\nhttps://blog.corsego.com/rails-bootstrap-5-yarn\n\n0:00 Introduction\n0:48 Pagy Backend\n2:18 Pagy Frontent\n3:26 5 posts per page\n3:45 Pagy Initializer - items\n5:25 Pagy Initializer - page\n5:45 Pagy Initializer - cycle\n6:17 Pagy Initializer - page_param\n6:57 Pagy Initializer - size\n8:21 Pagy Initializer - Bootstrap\n10:17 Pagy Initializer - i18n\n10:46 Pagy Initializer - overflow\n12:20 Pagy Initializer - user items per page\n14:43 Outro"
  },
  {
    "id": "nDJE8WG0auE",
    "title": "Ruby on Rails #18 Encrypted Credentials and Global Variables (+ VIM basics)",
    "description": "Credentials Cheat Sheet:\nhttps://blog.corsego.com/ruby-on-rails-6-credentials-tldr\nOfficial Docs:\nhttps://edgeguides.rubyonrails.org/security.html#custom-credentials\n\n0:00 The Problem\n01:25 editing and displaying credentials\n09:25 different environment credentials \n12:32 credentials in production (heroku)\n15:12 CHEAT SHEET\n16:59 credential files for different environments"
  },
  {
    "id": "tFvtwEmW-GE",
    "title": "Ruby on Rails #17 Gem Wicked PDF - generate, save, and send PDFs",
    "description": "gem wicked_pdf: \nhttps://github.com/mileszs/wicked_pdf\nsource code:\nhttps://github.com/corsego/17-wicked_pdf\nblogpost \"Complete guide to generating PDFs with gem wicked_pdf\":\nhttps://blog.corsego.com/gem-wicked-pdf\n\ninstall gem wicked pdf:\nhttps://github.com/corsego/howto-wicked_pdf/commit/c09d4f7140c1772115f639a3fb000cfc76dc1399\nsend PDF as attachment:\nhttps://github.com/corsego/howto-wicked_pdf/commit/4f458597d6bc8d9480ea1b12ba9b2c4bcfafa8c3\nmake it work with heroku:\nhttps://github.com/corsego/howto-wicked_pdf/commit/794dc350499aa5e5421a9bf5d6c4e9657f7924c0\n\n0:00 Installation, Basic usecases\n14:05 Send PDF as attachment\n18:35 wicked_pdf on heroku"
  },
  {
    "id": "gbbGhBUBftE",
    "title": "Ruby on Rails #16 Gem ActsAsVotable - upvote and downvote with AJAX",
    "description": "Gem source: \nhttps://github.com/ryanto/acts_as_votable\nSource code: \nhttps://github.com/corsego/16-acts_as_votable\n\nBlogpost - install gem: \nhttps://blog.corsego.com/gem-acts-as-votable\nBlogpost - best ajax voting: \nhttps://blog.corsego.com/gem-acts-as-votable-2\n\n0:00 Intro\n1:08 gem acts_as_votable\n4:10 upvote, unvote posts\n14:30 summary\n15:34 see votes count\n20:26 sort posts by rating\n20:57 summary of adding votes count\n21:40 downvote posts\n24:10 final demo"
  },
  {
    "id": "7HJPwq9D7ec",
    "title": "Ruby on Rails #15 Stripe API - SaaS blog - Webhooks to update Subscription Status",
    "description": "Github Repo: \nhttps://github.com/corsego/shoplify\nHeroku Demo: \nhttps://shoplify.herokuapp.com/\n\nadd stripe webhooks\nhttps://github.com/corsego/saasblog/commit/6fc9c4eb8c9ac158d0092dff32a0487708218dda\nadd customer.created event to webhooks\nhttps://github.com/corsego/saasblog/commit/bcae4eadedbc81fb3cff3dc1c463380c833b0c36\nfix typo in webhooks customer.created\nhttps://github.com/corsego/saasblog/commit/6bb5a61a1b6fc4f47a421fae51e9c044a561b5c8\nupdate webhooks for subscriptions\nhttps://github.com/corsego/saasblog/commit/de5e26500a27eb34f8d6a9aaefb15318ba8ad10c\nbetter general styling \nhttps://github.com/corsego/saasblog/commit/8e8d345eb992eb1a4398466152bafb91cb41625d\n\n0:00 Introduction\n1:50 webhooks controller and routes\n4:55 stripe dashboard webhooks endpoint\n5:41 add webhook API to credentials\n7:00 IT WORKS! Subscription status is updated by webhook!\n10:37 create new webhook - stripe.customer.created\n15:37 Final message, Thank you"
  },
  {
    "id": "CLz81jjlFHM",
    "title": "Ruby on Rails #14 Stripe API - SaaS blog - Stripe Checkout Session, Billing Portal",
    "description": "Github Repo: \nhttps://github.com/corsego/saasblog\nHeroku Demo: \nhttps://saasblog.herokuapp.com/​\n\nlink to stripe checkout session\nhttps://github.com/corsego/saasblog/commit/30e3ba7155d1f206eba3520b8de35d8506b9a0d8\ncurrent_user can select any available plan\nhttps://github.com/corsego/saasblog/commit/044311dc77bb099f3f9aedeb54217ee2573e0981\nstripe billing portal\nhttps://github.com/corsego/saasblog/commit/b0d52e5b5d6254e8d7f903689455abbb3a91a1fc\n\n0:00 Basic Stripe Checkout Session \n5:59 Select Plan for Checkout Session\n9:54 Stripe Billing Portal"
  },
  {
    "id": "PO8mI8NYppA",
    "title": "Ruby on Rails #13 Stripe API - SaaS blog - gem Stripe + gem Devise, display Stripe pricing via API",
    "description": "Github Repo: \nhttps://github.com/corsego/saasblog\nHeroku Demo: \nhttps://saasblog.herokuapp.com/​\n\ninstall gem stripe\nhttps://github.com/corsego/saasblog/commit/93b6bcd69b0bad5427fe43f044a256cbd03ae52c\nassign stripe_customer_id to newly registered users\nhttps://github.com/corsego/saasblog/commit/7dcba4d57debd4b4880b4584fc8413bfc19aedfc\ndisplay stripe pricing on static page\nhttps://github.com/corsego/saasblog/commit/7fcc8386ec9858adb57b006b35b0eab5994b1c71\n\n0:00 Introduction\n0:47 install gem Stripe\n3:16 Rails Credentials\n6:28 User has one Stripe Customer Id\n10:38 Stripe Products and Prices\n15:04 Pricing page, display prices via Stripe API"
  },
  {
    "id": "5Aj9IPiNl4M",
    "title": "Ruby on Rails #12 Stripe API - SaaS blog - Build the MVP",
    "description": "Github Repo: \nhttps://github.com/corsego/saasblog\nHeroku Demo: \nhttps://saasblog.herokuapp.com/​\nDevise navigation: \nhttps://blog.corsego.com/navigation-for-devise\nBetter scaffolds: \nhttps://blog.corsego.com/skinny-rails-generators\n\nscaffold posts \nhttps://github.com/corsego/saasblog/commit/e7a689cfe307e170f287a5cfd512321a86e52276\nposts validations and navigation \nhttps://github.com/corsego/saasblog/commit/ebb38dbfd9fe5ef5b867bfabc890fc368314f6c7\ngem faker to generate fake posts \nhttps://github.com/corsego/saasblog/commit/35ee68e04dbd8e3b3b6a8fee5d9f9ed42450c8d3\ninstall gem devise \nhttps://github.com/corsego/saasblog/commit/40684e37c3aa71ef754f57e84148a99e54f13bb7\nadd subscription fields to users, only active subscribers can view premium posts\nhttps://github.com/corsego/saasblog/commit/d49efa0ad65f9e59259e8b7df4a649410707ec20\n\n0:00 Introduction\n1:36 Scaffold Posts\n3:39 Post validations, basic navigation\n5:43 gem Faker, seeds for Posts\n9:34 gem Devise, devise navigation\n14:24 only users with active subscription can see premium posts"
  },
  {
    "id": "LuWMUVXMtmk",
    "title": "Ruby on Rails #11 Stripe API - Coupons, Currencies, gem money rails",
    "description": "Github Repo: \nhttps://github.com/corsego/shoplify\nHeroku Demo: \nhttps://shoplify.herokuapp.com/​\n\nallow_promotion_codes for checkout\nhttps://github.com/corsego/shoplify/commit/a094810ff35e8a9f14843fe5dbad2ec93a6b6d50\nproduct can have prices with different currencies\nhttps://github.com/corsego/shoplify/commit/4870b0175c62df9c53ce155faafb909d51d6fcab\ngem money-rails\nhttps://github.com/corsego/shoplify/commit/ecce80910b73451691a1ff6f847172deec87807c\n\n0:00 Stripe Coupons and Promocodes\n3:32 Currencies\n12:29 gem money-rails"
  },
  {
    "id": "FvBelsmY1BY",
    "title": "Ruby on Rails #10 Stripe API - Clear Cart after Checkout, edit Stripe Price",
    "description": "Github Repo: \nhttps://github.com/corsego/shoplify\nHeroku Demo: \nhttps://shoplify.herokuapp.com/​\n\nif product price is updated - create new stripe price and assing to product\nhttps://github.com/corsego/shoplify/commit/a43e7c88661becede21d76eb2f4af400cf8d64f9\nempty cart after successful transaction\nhttps://github.com/corsego/shoplify/commit/c19566ef5b1c4c0a2eaf99475c5e688fb08f302b\n\n0:00 clear Shopping Cart after Checkout\n2:19 display checkout success only if session_id is present\n4:11 display items purchased on success page\n6:58 when local product price changes - create new Stripe Price and associate it with local product"
  },
  {
    "id": "Qu9LCbB2HmM",
    "title": "Ruby on Rails #9 Stripe API - Shopping Cart, Checkout Multiple Products",
    "description": "Github Repo: \nhttps://github.com/corsego/shoplify\nHeroku Demo: \nhttps://shoplify.herokuapp.com/​\n\nsession-based Shopping Cart\nhttps://github.com/corsego/shoplify/commit/a34883db97424125ad2dcf366fce9ed151738690\nStripe Checkout for all items in Shopping Cart\nhttps://github.com/corsego/shoplify/commit/6e30df91fde4a5d29b1547b2975d91134c84ffc0\n\n0:00 session-based Shopping Cart\n7:15 Stripe Checkout for all items in Shopping Cart\n14:38 Final Demo"
  },
  {
    "id": "LGlbkkwQkbU",
    "title": "Ruby on Rails #8 Stripe API - Update Webhooks and Success URL",
    "description": "Github Repo: \nhttps://github.com/corsego/shoplify\nHeroku Demo: \nhttps://shoplify.herokuapp.com/​\n\nmove logic from checkout#success to webhooks \nhttps://github.com/corsego/shoplify/commit/aa726bcfd492033f4c051f2251a76884d72d2ffd\nui element to disable checkout button \nhttps://github.com/corsego/shoplify/commit/61f5dc74135322ab826bf273b96f937f2829a34c\nbeautify data display on checkout success page\nhttps://github.com/corsego/shoplify/commit/5a5d636901bf62f5500e0cbda87067eb9c69eb07\n\n0:00  move logic from checkout#success to webhooks \n7:51 ui element to disable checkout button \n9:28 beautify data display on checkout success page"
  },
  {
    "id": "mosADW_yQek",
    "title": "Ruby on Rails #7 Stripe API - Hijack Stripe Checkout Session, Payment Success URL",
    "description": "Github Repo: \nhttps://github.com/corsego/shoplify\nHeroku Demo: \nhttps://shoplify.herokuapp.com/​\n\nRetrieve Checkout Session in view, play with Stripe API JSON\nhttps://github.com/corsego/shoplify/commit/9c7223de3687d45f965cae91424d31d0717f3eea\nSuccess and Cancel paths for stripe checkout\nhttps://github.com/corsego/shoplify/commit/487acbfbf395e9c51727ca9542cab5cc07c8f1f9\nAfter Successful Checkout increment sales count WITHOUT Webhooks\nhttps://github.com/corsego/shoplify/commit/71eb646ad8d23a5803b63d4d25f9eb5f81e14289\n\n0:00 Retrieve Checkout Session in view, play with Stripe API JSON\n14:40 Success and Cancel paths for stripe checkout\n18:40 After Successful Checkout increment sales count WITHOUT Webhooks"
  },
  {
    "id": "lqDJ-ko9GO4",
    "title": "Ruby on Rails #6 Stripe API - Stripe with Devise, Create Stripe API records from Rails",
    "description": "Github Repo: \nhttps://github.com/corsego/shoplify\nHeroku Demo: \nhttps://shoplify.herokuapp.com/\n\ninstall gem devise\nhttps://github.com/corsego/shoplify/commit/895542c432e38a30270cdefb7c92ab6fbcdc6481\nuser is assigned stripe_customer_id after create\nhttps://github.com/corsego/shoplify/commit/5ede7fd7080ae5f68efcfcce47b50acaed289d15\nassign checkout to current_user.stripe_customer_id\nhttps://github.com/corsego/shoplify/commit/5f847af0a9fdad8a022a56df2b03f5ca9ee460d9\nadd stripe_product_id to products\nhttps://github.com/corsego/shoplify/commit/8d9fa78420534c71fc3255d496637d35615fd114\nadd stripe_price_id to products, checkout session for specific product\nhttps://github.com/corsego/shoplify/commit/5e786e2e2e1f079907c0f749362932b25f976457\nskip devise authentication for webhooks controller \nhttps://github.com/corsego/shoplify/commit/35a98719a848b54465482094cb89f460d22c626a\n\n0:00 Introduction\n4:22 Install Gem Devise\n8:02 Associate User to Stripe Customer\n14:15 Associate User to Stripe Checkout Session\n17:50 Associate Products with Stripe Products,\n28:08 Associate Products with Stripe Prices, Checkout for specific Price\n36:13 Update Webhooks to work with Devise"
  },
  {
    "id": "qEVn9sXNCAI",
    "title": "Ruby on Rails #5 Stripe API - Pay Now Button with Stripe Checkout API",
    "description": "Github Repo: \nhttps://github.com/corsego/shoplify\nHeroku Demo: \nhttps://shoplify.herokuapp.com/\nStripe Dashboard: \nhttps://dashboard.stripe.com/\nStripe Checkout: \nhttps://stripe.com/docs/payments/checkout/migration\n\ninitialize app\nhttps://github.com/corsego/shoplify/commit/32240856ab97fd0d34ee7b09a05710762a9e4414\nscaffold products\nhttps://github.com/corsego/shoplify/commit/c1cea7f118e2d311826852bcaa5ae5dafd08c874\nproduct validations\nhttps://github.com/corsego/shoplify/commit/f78f741e3c5a1b444db37e412ace0f6eac680c76\ninstall gem stripe\nhttps://github.com/corsego/shoplify/commit/32338a2a5a4c21318b1576544a1a4f955e89100b\nstripe checkout session \nhttps://github.com/corsego/shoplify/commit/0011a727b1272fb96ae0d8b5618b67975fdf11a8\nadd_sales_count_to_products\nhttps://github.com/corsego/shoplify/commit/67625c3d2297bc926e3abd4f864e32ada1100cc8\nadd stripe webhooks\nhttps://github.com/corsego/shoplify/commit/e874c279e60df36662da691f965a545e6289c8ec\n\n0:00 Introduction \n1:56 Create new Rails app, push to github \n4:14 Create Products table, validations, basic navigation\n9:43 Gem Stripe, make API calls to Stripe\n12:45 Rails Credentials - hide API keys\n16:47 Stripe Checkout button\n30:41 Recap on integrating Stripe Checkout button\n32:07 Add sales_count to Products\n34:52 Push application to Heroku\n36:41 Webhook to update sales_count when Stripe successfully processes payment\n44:35 Final DEMO"
  },
  {
    "id": "qFgVu9KK4XY",
    "title": "Ruby on Rails #04 Telegram API - omniauth without a gem",
    "description": "Github repo: \nhttps://github.com/corsego/02-03-04-telegrails\nLive demo: \nhttps://telegrails.herokuapp.com\nUseful resources:\nhttps://core.telegram.org/widgets/login\n\n0:00 Intro\n0:27 Login widget\n7:37 Save current user in Session\n14:18 Log out (delete data from Session)\n18:30 TelegramMailer to send private messages"
  },
  {
    "id": "t0U0CPZH8ZU",
    "title": "Ruby on Rails #03 Telegram API - notifications for CRUD operations",
    "description": "Github repo: \nhttps://github.com/corsego/02-03-04-telegrails\nLive demo: \nhttps://telegrails.herokuapp.com\n\n0:00 Intro\n0:38 Scaffold Posts\n2:52 TelegramMailer for CRUD actions\n9:13 Public form to publish a telegram message"
  },
  {
    "id": "mEUHKcTeO-c",
    "title": "Ruby on Rails #02 Telegram API - Create Bot, use API, gem HTTParty",
    "description": "Github repo: \nhttps://github.com/corsego/02-03-04-telegrails\nUseful resources:\nhttps://web.telegram.org/\nhttps://github.com/jnunemaker/httparty\nHeroku demo: \nhttp://telegrails.herokuapp.com/\n\n0:00 Intro\n1:37 Create Bot\n03:54 API - get bot ID\n05:02 API - get user ID, messages\n07:01 create group, get group ID\n8:14 API - send message\n10:32 - Rails link to API request\n14:22 - HTTParty, API request via controller\n20:41 - set global TELEGRAM api key\n25:39 - improve HTTParty method"
  },
  {
    "id": "9vaK9nDMbU8",
    "title": "Ruby on Rails #01 Gem Boring Generators - 10x your initial development speed",
    "description": "Gem source: \nhttps://github.com/abhaynikam/boring_generators\nGithub repo: \nhttps://github.com/corsego/01-boring_generators\n\n0:00 introduction\n0:55 home index page\n1:42 add gem boring_generators\n2:04 add bootstrap\n04:50 add fontawesome\n06:25 add devise\n08:26 add omniauth-github\n12:16 final thoughts"
  }
]